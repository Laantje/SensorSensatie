
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000018f6  0000198a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021c  0080012e  0080012e  000019b8  2**0
                  ALLOC
  3 .stab         00002358  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000083c  00000000  00000000  00003d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000308  00000000  00000000  00004550  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024d3  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000118e  00000000  00000000  00006d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a67  00000000  00000000  00007eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00009920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007aa  00000000  00000000  00009fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001682  00000000  00000000  0000a796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000be18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ef       	ldi	r30, 0xF6	; 246
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	ae e2       	ldi	r26, 0x2E	; 46
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 34       	cpi	r26, 0x4A	; 74
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <main>
      9e:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_adc>:

void init_adc()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC0 = input)
	ADMUX = (1<<REFS0);
      a6:	80 e4       	ldi	r24, 0x40	; 64
      a8:	80 93 7c 00 	sts	0x007C, r24
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      ac:	87 e8       	ldi	r24, 0x87	; 135
      ae:	80 93 7a 00 	sts	0x007A, r24
}
      b2:	08 95       	ret

000000b4 <read_adc>:

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                  //Clear the older channel that was read
      b4:	ec e7       	ldi	r30, 0x7C	; 124
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	90 81       	ld	r25, Z
      ba:	90 7f       	andi	r25, 0xF0	; 240
      bc:	90 83       	st	Z, r25
	ADMUX |= channel;               //Defines the new ADC channel to be read
      be:	90 81       	ld	r25, Z
      c0:	89 2b       	or	r24, r25
      c2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c4:	83 ec       	ldi	r24, 0xC3	; 195
      c6:	99 e0       	ldi	r25, 0x09	; 9
      c8:	01 97       	sbiw	r24, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <read_adc+0x14>
      cc:	00 c0       	rjmp	.+0      	; 0xce <read_adc+0x1a>
      ce:	00 00       	nop
	_delay_ms(10);					// Start the AD conversion
	ADCSRA|=0x40;					// Wait for the AD conversion to complete
      d0:	ea e7       	ldi	r30, 0x7A	; 122
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	80 64       	ori	r24, 0x40	; 64
      d8:	80 83       	st	Z, r24
	while ((ADCSRA & 0x10)==0);
      da:	80 81       	ld	r24, Z
      dc:	84 ff       	sbrs	r24, 4
      de:	fd cf       	rjmp	.-6      	; 0xda <read_adc+0x26>
	ADCSRA|=0x10;
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 61       	ori	r24, 0x10	; 16
      e8:	80 83       	st	Z, r24
	return ADC;                    //Returns the ADC value of the chosen channel
      ea:	80 91 78 00 	lds	r24, 0x0078
      ee:	90 91 79 00 	lds	r25, 0x0079
}
      f2:	08 95       	ret

000000f4 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	8c 01       	movw	r16, r24
      fe:	eb 01       	movw	r28, r22
     100:	da 01       	movw	r26, r20
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     102:	80 91 3a 01 	lds	r24, 0x013A
     106:	90 91 3b 01 	lds	r25, 0x013B
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	b1 f0       	breq	.+44     	; 0x13a <SCH_Add_Task+0x46>
     10e:	e1 e4       	ldi	r30, 0x41	; 65
     110:	f1 e0       	ldi	r31, 0x01	; 1
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
     116:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     118:	b9 01       	movw	r22, r18
     11a:	80 81       	ld	r24, Z
     11c:	91 81       	ldd	r25, Z+1	; 0x01
     11e:	00 97       	sbiw	r24, 0x00	; 0
     120:	41 f0       	breq	.+16     	; 0x132 <SCH_Add_Task+0x3e>
     122:	2f 5f       	subi	r18, 0xFF	; 255
     124:	3f 4f       	sbci	r19, 0xFF	; 255
     126:	37 96       	adiw	r30, 0x07	; 7
     128:	26 30       	cpi	r18, 0x06	; 6
     12a:	31 05       	cpc	r19, r1
     12c:	a1 f7       	brne	.-24     	; 0x116 <SCH_Add_Task+0x22>
   {
      Index++;
     12e:	84 2f       	mov	r24, r20
     130:	01 c0       	rjmp	.+2      	; 0x134 <SCH_Add_Task+0x40>
     132:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
     134:	85 30       	cpi	r24, 0x05	; 5
     136:	21 f4       	brne	.+8      	; 0x140 <SCH_Add_Task+0x4c>
     138:	17 c0       	rjmp	.+46     	; 0x168 <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
     13e:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
     140:	cb 01       	movw	r24, r22
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	86 1b       	sub	r24, r22
     150:	97 0b       	sbc	r25, r23
     152:	fc 01       	movw	r30, r24
     154:	e6 5c       	subi	r30, 0xC6	; 198
     156:	fe 4f       	sbci	r31, 0xFE	; 254
     158:	11 83       	std	Z+1, r17	; 0x01
     15a:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
     15c:	d3 83       	std	Z+3, r29	; 0x03
     15e:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
     160:	b5 83       	std	Z+5, r27	; 0x05
     162:	a4 83       	std	Z+4, r26	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
     164:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
     166:	84 2f       	mov	r24, r20
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	fc 01       	movw	r30, r24
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	ee 0f       	add	r30, r30
     17c:	ff 1f       	adc	r31, r31
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e8 1b       	sub	r30, r24
     184:	f9 0b       	sbc	r31, r25
     186:	e6 5c       	subi	r30, 0xC6	; 198
     188:	fe 4f       	sbci	r31, 0xFE	; 254
     18a:	11 82       	std	Z+1, r1	; 0x01
     18c:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
     18e:	13 82       	std	Z+3, r1	; 0x03
     190:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
     192:	15 82       	std	Z+5, r1	; 0x05
     194:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
     196:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	08 95       	ret

0000019c <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	1f 93       	push	r17
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     1aa:	c0 e4       	ldi	r28, 0x40	; 64
     1ac:	d1 e0       	ldi	r29, 0x01	; 1
     1ae:	0f 2e       	mov	r0, r31
     1b0:	fa ef       	ldi	r31, 0xFA	; 250
     1b2:	ef 2e       	mov	r14, r31
     1b4:	ff ef       	ldi	r31, 0xFF	; 255
     1b6:	ff 2e       	mov	r15, r31
     1b8:	f0 2d       	mov	r31, r0
     1ba:	ec 0e       	add	r14, r28
     1bc:	fd 1e       	adc	r15, r29
     1be:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
     1c0:	88 81       	ld	r24, Y
     1c2:	88 23       	and	r24, r24
     1c4:	91 f0       	breq	.+36     	; 0x1ea <SCH_Dispatch_Tasks+0x4e>
     1c6:	d7 01       	movw	r26, r14
     1c8:	ed 91       	ld	r30, X+
     1ca:	fc 91       	ld	r31, X
     1cc:	11 97       	sbiw	r26, 0x01	; 1
     1ce:	30 97       	sbiw	r30, 0x00	; 0
     1d0:	61 f0       	breq	.+24     	; 0x1ea <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
     1d2:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
     1d4:	88 81       	ld	r24, Y
     1d6:	81 50       	subi	r24, 0x01	; 1
     1d8:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
     1da:	f7 01       	movw	r30, r14
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	95 81       	ldd	r25, Z+5	; 0x05
     1e0:	00 97       	sbiw	r24, 0x00	; 0
     1e2:	19 f4       	brne	.+6      	; 0x1ea <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
     1e4:	81 2f       	mov	r24, r17
     1e6:	0e 94 b9 00 	call	0x172	; 0x172 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     1ea:	1f 5f       	subi	r17, 0xFF	; 255
     1ec:	27 96       	adiw	r28, 0x07	; 7
     1ee:	87 e0       	ldi	r24, 0x07	; 7
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	e8 0e       	add	r14, r24
     1f4:	f9 1e       	adc	r15, r25
     1f6:	15 30       	cpi	r17, 0x05	; 5
     1f8:	19 f7       	brne	.-58     	; 0x1c0 <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	ff 90       	pop	r15
     202:	ef 90       	pop	r14
     204:	df 90       	pop	r13
     206:	cf 90       	pop	r12
     208:	08 95       	ret

0000020a <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
     20a:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
     20c:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
     20e:	8c 2f       	mov	r24, r28
     210:	0e 94 b9 00 	call	0x172	; 0x172 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
     214:	cf 5f       	subi	r28, 0xFF	; 255
     216:	c5 30       	cpi	r28, 0x05	; 5
     218:	d1 f7       	brne	.-12     	; 0x20e <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR0A = (uint16_t)6250;   		     // 10ms = (256/16.000.000) * 625
     21a:	8a e6       	ldi	r24, 0x6A	; 106
     21c:	87 bd       	out	0x27, r24	; 39
   TCCR0B = (1 << CS02) | (1 << WGM02);  // prescale op 64, top counter = value OCR1A (CTC mode)
     21e:	8c e0       	ldi	r24, 0x0C	; 12
     220:	85 bd       	out	0x25, r24	; 37
   TIMSK0 = 1 << OCIE0A;   		     // Timer 1 Output Compare A Match Interrupt Enable
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	80 93 6e 00 	sts	0x006E, r24
}
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
     22c:	78 94       	sei
}
     22e:	08 95       	ret

00000230 <__vector_14>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER0_COMPA_vect)
{
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	2f 93       	push	r18
     23c:	3f 93       	push	r19
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	af 93       	push	r26
     244:	bf 93       	push	r27
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	ef 93       	push	r30
     24c:	ff 93       	push	r31
     24e:	ea e3       	ldi	r30, 0x3A	; 58
     250:	f1 e0       	ldi	r31, 0x01	; 1
     252:	df 01       	movw	r26, r30
     254:	16 96       	adiw	r26, 0x06	; 6
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER0_COMPA_vect)
     256:	9f 01       	movw	r18, r30
     258:	2d 5d       	subi	r18, 0xDD	; 221
     25a:	3f 4f       	sbci	r19, 0xFF	; 255
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
     25c:	80 81       	ld	r24, Z
     25e:	91 81       	ldd	r25, Z+1	; 0x01
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	91 f0       	breq	.+36     	; 0x288 <__vector_14+0x58>
      {
         if(SCH_tasks_G[Index].Delay == 0)
     264:	82 81       	ldd	r24, Z+2	; 0x02
     266:	93 81       	ldd	r25, Z+3	; 0x03
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	59 f4       	brne	.+22     	; 0x282 <__vector_14+0x52>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
     26c:	8c 91       	ld	r24, X
     26e:	8f 5f       	subi	r24, 0xFF	; 255
     270:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
     272:	84 81       	ldd	r24, Z+4	; 0x04
     274:	95 81       	ldd	r25, Z+5	; 0x05
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	39 f0       	breq	.+14     	; 0x288 <__vector_14+0x58>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	93 83       	std	Z+3, r25	; 0x03
     27e:	82 83       	std	Z+2, r24	; 0x02
     280:	03 c0       	rjmp	.+6      	; 0x288 <__vector_14+0x58>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	93 83       	std	Z+3, r25	; 0x03
     286:	82 83       	std	Z+2, r24	; 0x02
     288:	37 96       	adiw	r30, 0x07	; 7
     28a:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER0_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     28c:	e2 17       	cp	r30, r18
     28e:	f3 07       	cpc	r31, r19
     290:	29 f7       	brne	.-54     	; 0x25c <__vector_14+0x2c>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
     292:	ff 91       	pop	r31
     294:	ef 91       	pop	r30
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	bf 91       	pop	r27
     29c:	af 91       	pop	r26
     29e:	9f 91       	pop	r25
     2a0:	8f 91       	pop	r24
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <sendStatus>:
		default:
			return;
	}
}

void sendStatus(int val) {
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	2a 97       	sbiw	r28, 0x0a	; 10
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
	char buffer [10];
	sprintf(buffer, "%u", val);
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <sendStatus+0x1a>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <sendStatus+0x1c>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <sendStatus+0x1e>
     2ce:	ed b7       	in	r30, 0x3d	; 61
     2d0:	fe b7       	in	r31, 0x3e	; 62
     2d2:	31 96       	adiw	r30, 0x01	; 1
     2d4:	8e 01       	movw	r16, r28
     2d6:	0f 5f       	subi	r16, 0xFF	; 255
     2d8:	1f 4f       	sbci	r17, 0xFF	; 255
     2da:	ad b7       	in	r26, 0x3d	; 61
     2dc:	be b7       	in	r27, 0x3e	; 62
     2de:	12 96       	adiw	r26, 0x02	; 2
     2e0:	1c 93       	st	X, r17
     2e2:	0e 93       	st	-X, r16
     2e4:	11 97       	sbiw	r26, 0x01	; 1
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	31 e0       	ldi	r19, 0x01	; 1
     2ea:	33 83       	std	Z+3, r19	; 0x03
     2ec:	22 83       	std	Z+2, r18	; 0x02
     2ee:	95 83       	std	Z+5, r25	; 0x05
     2f0:	84 83       	std	Z+4, r24	; 0x04
     2f2:	0e 94 a2 09 	call	0x1344	; 0x1344 <sprintf>
	transmitln(buffer);
     2f6:	8d b7       	in	r24, 0x3d	; 61
     2f8:	9e b7       	in	r25, 0x3e	; 62
     2fa:	06 96       	adiw	r24, 0x06	; 6
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	9e bf       	out	0x3e, r25	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	8d bf       	out	0x3d, r24	; 61
     306:	c8 01       	movw	r24, r16
     308:	0e 94 80 05 	call	0xb00	; 0xb00 <transmitln>
     30c:	2a 96       	adiw	r28, 0x0a	; 10
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <ser_readln>:
char receiveBuffer[200];
char handshakeBuffer[200];

int screenRequest = 0;

void ser_readln(char *line, uint8_t bufsize) {
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	8c 01       	movw	r16, r24
	uint8_t p=0;
     32e:	c0 e0       	ldi	r28, 0x00	; 0
		c=receive();
		if (c!='\n') {
			line[p++]=c;
		}
		line[p]='\0';
	} while ((c!='\n') && (p<bufsize-1));
     330:	e6 2e       	mov	r14, r22
     332:	ff 24       	eor	r15, r15
     334:	08 94       	sec
     336:	e1 08       	sbc	r14, r1
     338:	f1 08       	sbc	r15, r1

void ser_readln(char *line, uint8_t bufsize) {
	uint8_t p=0;
	char c;
	do {
		c=receive();
     33a:	0e 94 62 05 	call	0xac4	; 0xac4 <receive>
		if (c!='\n') {
     33e:	8a 30       	cpi	r24, 0x0A	; 10
     340:	79 f0       	breq	.+30     	; 0x360 <ser_readln+0x3e>
			line[p++]=c;
     342:	f8 01       	movw	r30, r16
     344:	ec 0f       	add	r30, r28
     346:	f1 1d       	adc	r31, r1
     348:	80 83       	st	Z, r24
     34a:	cf 5f       	subi	r28, 0xFF	; 255
		}
		line[p]='\0';
     34c:	8c 2f       	mov	r24, r28
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	f8 01       	movw	r30, r16
     352:	e8 0f       	add	r30, r24
     354:	f9 1f       	adc	r31, r25
     356:	10 82       	st	Z, r1
	} while ((c!='\n') && (p<bufsize-1));
     358:	8e 15       	cp	r24, r14
     35a:	9f 05       	cpc	r25, r15
     35c:	74 f3       	brlt	.-36     	; 0x33a <ser_readln+0x18>
     35e:	04 c0       	rjmp	.+8      	; 0x368 <ser_readln+0x46>
	do {
		c=receive();
		if (c!='\n') {
			line[p++]=c;
		}
		line[p]='\0';
     360:	f8 01       	movw	r30, r16
     362:	ec 0f       	add	r30, r28
     364:	f1 1d       	adc	r31, r1
     366:	10 82       	st	Z, r1
	} while ((c!='\n') && (p<bufsize-1));
}
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	08 95       	ret

00000374 <handshake>:

void handshake(){
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
	ser_readln(handshakeBuffer, 20);
     378:	c6 e2       	ldi	r28, 0x26	; 38
     37a:	d2 e0       	ldi	r29, 0x02	; 2
     37c:	ce 01       	movw	r24, r28
     37e:	64 e1       	ldi	r22, 0x14	; 20
     380:	0e 94 91 01 	call	0x322	; 0x322 <ser_readln>
	
	if (!strcmp(handshakeBuffer, "handshake"))
     384:	ce 01       	movw	r24, r28
     386:	63 e0       	ldi	r22, 0x03	; 3
     388:	71 e0       	ldi	r23, 0x01	; 1
     38a:	0e 94 92 09 	call	0x1324	; 0x1324 <strcmp>
     38e:	28 2f       	mov	r18, r24
     390:	39 2f       	mov	r19, r25
     392:	21 15       	cp	r18, r1
     394:	31 05       	cpc	r19, r1
     396:	41 f4       	brne	.+16     	; 0x3a8 <handshake+0x34>
	{
		transmitln("Hand shaked!");
     398:	8d e0       	ldi	r24, 0x0D	; 13
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	0e 94 80 05 	call	0xb00	; 0xb00 <transmitln>
		setPoep(1);
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <setPoep>
	}
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <getScreenRequest>:

int getScreenRequest() {
	if(screenRequest == 1) {
     3ae:	80 91 2e 01 	lds	r24, 0x012E
     3b2:	90 91 2f 01 	lds	r25, 0x012F
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	91 05       	cpc	r25, r1
     3ba:	39 f4       	brne	.+14     	; 0x3ca <getScreenRequest+0x1c>
		screenRequest = 0;
     3bc:	10 92 2f 01 	sts	0x012F, r1
     3c0:	10 92 2e 01 	sts	0x012E, r1
		return 1;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	08 95       	ret
	} 
	else if(screenRequest == 2) {
     3ca:	82 30       	cpi	r24, 0x02	; 2
     3cc:	91 05       	cpc	r25, r1
     3ce:	39 f4       	brne	.+14     	; 0x3de <getScreenRequest+0x30>
		screenRequest = 0;
     3d0:	10 92 2f 01 	sts	0x012F, r1
     3d4:	10 92 2e 01 	sts	0x012E, r1
		return 2;
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	08 95       	ret
	}
	else {
		return 0;
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     3e2:	08 95       	ret

000003e4 <checkCommands>:

void checkCommands()
{
	ser_readln(receiveBuffer, 200); //lees een regel, doe het in "buffer" met grootte 200
     3e4:	8e e5       	ldi	r24, 0x5E	; 94
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	68 ec       	ldi	r22, 0xC8	; 200
     3ea:	0e 94 91 01 	call	0x322	; 0x322 <ser_readln>
	int command = receiveBuffer[0];
	switch(command)
     3ee:	80 91 5e 01 	lds	r24, 0x015E
     3f2:	83 33       	cpi	r24, 0x33	; 51
     3f4:	a1 f0       	breq	.+40     	; 0x41e <checkCommands+0x3a>
     3f6:	84 33       	cpi	r24, 0x34	; 52
     3f8:	28 f4       	brcc	.+10     	; 0x404 <checkCommands+0x20>
     3fa:	81 33       	cpi	r24, 0x31	; 49
     3fc:	51 f0       	breq	.+20     	; 0x412 <checkCommands+0x2e>
     3fe:	82 33       	cpi	r24, 0x32	; 50
     400:	39 f5       	brne	.+78     	; 0x450 <checkCommands+0x6c>
     402:	0a c0       	rjmp	.+20     	; 0x418 <checkCommands+0x34>
     404:	85 33       	cpi	r24, 0x35	; 53
     406:	a9 f0       	breq	.+42     	; 0x432 <checkCommands+0x4e>
     408:	85 33       	cpi	r24, 0x35	; 53
     40a:	60 f0       	brcs	.+24     	; 0x424 <checkCommands+0x40>
     40c:	86 33       	cpi	r24, 0x36	; 54
     40e:	01 f5       	brne	.+64     	; 0x450 <checkCommands+0x6c>
     410:	17 c0       	rjmp	.+46     	; 0x440 <checkCommands+0x5c>
	{
		// Command 1: Update the manual status
		case '1': //Request temp
			sendTemp();
     412:	0e 94 a3 04 	call	0x946	; 0x946 <sendTemp>
			return;
     416:	08 95       	ret
		case '2': //Request light
			sendLight();
     418:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <sendLight>
			return;
     41c:	08 95       	ret
		case '3': //Request Ultrasoon
			sendDistance();
     41e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <sendDistance>
			return;
     422:	08 95       	ret
		case '4': //Open window
			sendStatus(4444);
     424:	8c e5       	ldi	r24, 0x5C	; 92
     426:	91 e1       	ldi	r25, 0x11	; 17
     428:	0e 94 58 01 	call	0x2b0	; 0x2b0 <sendStatus>
			openScreen();
     42c:	0e 94 04 03 	call	0x608	; 0x608 <openScreen>
			return;
     430:	08 95       	ret
		case '5': //Close window
			sendStatus(5555);
     432:	83 eb       	ldi	r24, 0xB3	; 179
     434:	95 e1       	ldi	r25, 0x15	; 21
     436:	0e 94 58 01 	call	0x2b0	; 0x2b0 <sendStatus>
			closeScreen();
     43a:	0e 94 17 03 	call	0x62e	; 0x62e <closeScreen>
			return;
     43e:	08 95       	ret
		case '6': //set uitrolstand
			setMaxUitrol(receiveBuffer);
     440:	8e e5       	ldi	r24, 0x5E	; 94
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 2a 03 	call	0x654	; 0x654 <setMaxUitrol>
			sendStatus(6666);
     448:	8a e0       	ldi	r24, 0x0A	; 10
     44a:	9a e1       	ldi	r25, 0x1A	; 26
     44c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <sendStatus>
     450:	08 95       	ret

00000452 <float2string>:
 */ 
#include <stdio.h>
#include "serial.h"

void float2string(float fVal)
{
     452:	cf 92       	push	r12
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	c4 56       	subi	r28, 0x64	; 100
     468:	d0 40       	sbci	r29, 0x00	; 0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
    char result[100];
    int dVal, dec, i;

    fVal += 0.005;   // added after a comment from Matt McNabb, see below.
     474:	2a e0       	ldi	r18, 0x0A	; 10
     476:	37 ed       	ldi	r19, 0xD7	; 215
     478:	43 ea       	ldi	r20, 0xA3	; 163
     47a:	5b e3       	ldi	r21, 0x3B	; 59
     47c:	0e 94 ab 06 	call	0xd56	; 0xd56 <__addsf3>
     480:	e6 2e       	mov	r14, r22
     482:	f7 2e       	mov	r15, r23
     484:	d8 2e       	mov	r13, r24
     486:	c9 2e       	mov	r12, r25

    dVal = fVal;
     488:	86 2f       	mov	r24, r22
     48a:	9f 2d       	mov	r25, r15
     48c:	ad 2d       	mov	r26, r13
     48e:	bc 2d       	mov	r27, r12
     490:	bc 01       	movw	r22, r24
     492:	cd 01       	movw	r24, r26
     494:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fixsfsi>
     498:	8b 01       	movw	r16, r22
     49a:	9c 01       	movw	r18, r24
    dec = (int)(fVal * 100) % 100;
     49c:	8e 2d       	mov	r24, r14
     49e:	9f 2d       	mov	r25, r15
     4a0:	ad 2d       	mov	r26, r13
     4a2:	bc 2d       	mov	r27, r12
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	48 ec       	ldi	r20, 0xC8	; 200
     4ae:	52 e4       	ldi	r21, 0x42	; 66
     4b0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__mulsf3>
     4b4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fixsfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	64 e6       	ldi	r22, 0x64	; 100
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>

    memset(result, 0, 100);
     4c4:	fe 01       	movw	r30, r28
     4c6:	31 96       	adiw	r30, 0x01	; 1
     4c8:	24 e6       	ldi	r18, 0x64	; 100
     4ca:	df 01       	movw	r26, r30
     4cc:	1d 92       	st	X+, r1
     4ce:	2a 95       	dec	r18
     4d0:	e9 f7       	brne	.-6      	; 0x4cc <float2string+0x7a>
    result[0] = (dec % 10) + '0';
     4d2:	6a e0       	ldi	r22, 0x0A	; 10
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>
     4da:	80 5d       	subi	r24, 0xD0	; 208
     4dc:	89 83       	std	Y+1, r24	; 0x01
    result[1] = (dec / 10) + '0';
     4de:	60 5d       	subi	r22, 0xD0	; 208
     4e0:	6a 83       	std	Y+2, r22	; 0x02
    result[2] = '.';
     4e2:	8e e2       	ldi	r24, 0x2E	; 46
     4e4:	8b 83       	std	Y+3, r24	; 0x03

    i = 3;
    while (dVal > 0)
     4e6:	10 16       	cp	r1, r16
     4e8:	11 06       	cpc	r1, r17
     4ea:	7c f4       	brge	.+30     	; 0x50a <float2string+0xb8>
     4ec:	fe 01       	movw	r30, r28
     4ee:	34 96       	adiw	r30, 0x04	; 4
    {
        result[i] = (dVal % 10) + '0';
     4f0:	2a e0       	ldi	r18, 0x0A	; 10
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	c8 01       	movw	r24, r16
     4f6:	b9 01       	movw	r22, r18
     4f8:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>
     4fc:	80 5d       	subi	r24, 0xD0	; 208
     4fe:	81 93       	st	Z+, r24
        dVal /= 10;
     500:	06 2f       	mov	r16, r22
     502:	17 2f       	mov	r17, r23
    result[0] = (dec % 10) + '0';
    result[1] = (dec / 10) + '0';
    result[2] = '.';

    i = 3;
    while (dVal > 0)
     504:	10 16       	cp	r1, r16
     506:	11 06       	cpc	r1, r17
     508:	ac f3       	brlt	.-22     	; 0x4f4 <float2string+0xa2>
        result[i] = (dVal % 10) + '0';
        dVal /= 10;
        i++;
    }

    for (i=strlen(result)-1; i>=0; i--)
     50a:	de 01       	movw	r26, r28
     50c:	11 96       	adiw	r26, 0x01	; 1
     50e:	fd 01       	movw	r30, r26
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <float2string+0xbe>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	ea 1b       	sub	r30, r26
     51a:	fb 0b       	sbc	r31, r27
     51c:	8f 01       	movw	r16, r30
     51e:	01 50       	subi	r16, 0x01	; 1
     520:	10 40       	sbci	r17, 0x00	; 0
     522:	5a f0       	brmi	.+22     	; 0x53a <float2string+0xe8>
 *  Author: Laantje
 */ 
#include <stdio.h>
#include "serial.h"

void float2string(float fVal)
     524:	7d 01       	movw	r14, r26
     526:	ee 0e       	add	r14, r30
     528:	ff 1e       	adc	r15, r31
        dVal /= 10;
        i++;
    }

    for (i=strlen(result)-1; i>=0; i--)
        send_char(result[i]);
     52a:	f7 01       	movw	r30, r14
     52c:	82 91       	ld	r24, -Z
     52e:	7f 01       	movw	r14, r30
     530:	0e 94 a9 05 	call	0xb52	; 0xb52 <send_char>
        result[i] = (dVal % 10) + '0';
        dVal /= 10;
        i++;
    }

    for (i=strlen(result)-1; i>=0; i--)
     534:	01 50       	subi	r16, 0x01	; 1
     536:	10 40       	sbci	r17, 0x00	; 0
     538:	c2 f7       	brpl	.-16     	; 0x52a <float2string+0xd8>
        send_char(result[i]);
}
     53a:	cc 59       	subi	r28, 0x9C	; 156
     53c:	df 4f       	sbci	r29, 0xFF	; 255
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	08 95       	ret

0000055a <concat>:

char* concat(const char *s1, const char *s2)
{
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	18 2f       	mov	r17, r24
     568:	09 2f       	mov	r16, r25
     56a:	c6 2f       	mov	r28, r22
     56c:	d7 2f       	mov	r29, r23
	char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator
     56e:	e8 2f       	mov	r30, r24
     570:	f9 2f       	mov	r31, r25
     572:	df 01       	movw	r26, r30
     574:	0d 90       	ld	r0, X+
     576:	00 20       	and	r0, r0
     578:	e9 f7       	brne	.-6      	; 0x574 <concat+0x1a>
     57a:	11 97       	sbiw	r26, 0x01	; 1
     57c:	cd 01       	movw	r24, r26
     57e:	8e 1b       	sub	r24, r30
     580:	9f 0b       	sbc	r25, r31
     582:	e6 2f       	mov	r30, r22
     584:	f7 2f       	mov	r31, r23
     586:	df 01       	movw	r26, r30
     588:	0d 90       	ld	r0, X+
     58a:	00 20       	and	r0, r0
     58c:	e9 f7       	brne	.-6      	; 0x588 <concat+0x2e>
     58e:	11 97       	sbiw	r26, 0x01	; 1
     590:	ae 1b       	sub	r26, r30
     592:	bf 0b       	sbc	r27, r31
     594:	8a 0f       	add	r24, r26
     596:	9b 1f       	adc	r25, r27
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <malloc>
     59e:	e8 2e       	mov	r14, r24
     5a0:	f9 2e       	mov	r15, r25
	// in real code you would check for errors in malloc here
	strcpy(result, s1);
     5a2:	61 2f       	mov	r22, r17
     5a4:	70 2f       	mov	r23, r16
     5a6:	0e 94 9b 09 	call	0x1336	; 0x1336 <strcpy>
	strcat(result, s2);
     5aa:	8e 2d       	mov	r24, r14
     5ac:	9f 2d       	mov	r25, r15
     5ae:	6c 2f       	mov	r22, r28
     5b0:	7d 2f       	mov	r23, r29
     5b2:	0e 94 87 09 	call	0x130e	; 0x130e <strcat>
	return result;
     5b6:	8e 2d       	mov	r24, r14
     5b8:	9f 2d       	mov	r25, r15
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <initLeds>:

#include <avr/io.h>
#include <stdio.h>

void initLeds() {
	DDRD |= _BV(PIND5); // Pin 5 output redLED
     5c8:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= _BV(PIND6); // Pin 6 output yellowLED
     5ca:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= _BV(PIND7); // Pin 7 output greenLED
     5cc:	57 9a       	sbi	0x0a, 7	; 10
}
     5ce:	08 95       	ret

000005d0 <setRedLed>:

void setRedLed(int val) {
	if(val == 0) {
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <setRedLed+0x8>
		PORTD &= 0b11011111;
     5d4:	5d 98       	cbi	0x0b, 5	; 11
     5d6:	08 95       	ret
	}
	else {
		PORTD |= 0b00100000;
     5d8:	5d 9a       	sbi	0x0b, 5	; 11
     5da:	08 95       	ret

000005dc <setGreenLed>:
	}
}

void setGreenLed(int val) {
	if(val == 0) {
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	11 f4       	brne	.+4      	; 0x5e4 <setGreenLed+0x8>
		PORTD &= 0b01111111;
     5e0:	5f 98       	cbi	0x0b, 7	; 11
     5e2:	08 95       	ret
	}
	else {
		PORTD |= 0b10000000;
     5e4:	5f 9a       	sbi	0x0b, 7	; 11
     5e6:	08 95       	ret

000005e8 <setYellowLed>:
	}
}

void setYellowLed(int val) {
	if(val == 0) {
     5e8:	00 97       	sbiw	r24, 0x00	; 0
     5ea:	11 f4       	brne	.+4      	; 0x5f0 <setYellowLed+0x8>
		PORTD &= 0b10111111;
     5ec:	5e 98       	cbi	0x0b, 6	; 11
     5ee:	08 95       	ret
	}
	else {
		PORTD |= 0b01000000;
     5f0:	5e 9a       	sbi	0x0b, 6	; 11
     5f2:	08 95       	ret

000005f4 <setMode>:
 */ 

int isAuto;

void setMode(int val) {
	isAuto = val;
     5f4:	90 93 ef 02 	sts	0x02EF, r25
     5f8:	80 93 ee 02 	sts	0x02EE, r24
}
     5fc:	08 95       	ret

000005fe <getMode>:

int getMode() {
	return isAuto;
     5fe:	80 91 ee 02 	lds	r24, 0x02EE
     602:	90 91 ef 02 	lds	r25, 0x02EF
     606:	08 95       	ret

00000608 <openScreen>:
int isWorking = 0;

char uitrolBuffer[20];

void openScreen() {
	setGreenLed(1);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setGreenLed>
	setRedLed(0);
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <setRedLed>
	
	state = 1;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	90 93 37 01 	sts	0x0137, r25
     620:	80 93 36 01 	sts	0x0136, r24
	
	interrupt = 0;
     624:	10 92 33 01 	sts	0x0133, r1
     628:	10 92 32 01 	sts	0x0132, r1
}
     62c:	08 95       	ret

0000062e <closeScreen>:

void closeScreen() {
	setGreenLed(0);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setGreenLed>
	setRedLed(1);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <setRedLed>
	
	state = 2;
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	90 93 37 01 	sts	0x0137, r25
     646:	80 93 36 01 	sts	0x0136, r24
	
	interrupt = 0;
     64a:	10 92 33 01 	sts	0x0133, r1
     64e:	10 92 32 01 	sts	0x0132, r1
}
     652:	08 95       	ret

00000654 <setMaxUitrol>:

void setMaxUitrol(char val[]) {
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	ec 01       	movw	r28, r24
	int i;
	
	if(strlen(val) == 4) {
     65a:	e8 2f       	mov	r30, r24
     65c:	fd 2f       	mov	r31, r29
     65e:	df 01       	movw	r26, r30
     660:	0d 90       	ld	r0, X+
     662:	00 20       	and	r0, r0
     664:	e9 f7       	brne	.-6      	; 0x660 <setMaxUitrol+0xc>
     666:	11 97       	sbiw	r26, 0x01	; 1
     668:	ae 1b       	sub	r26, r30
     66a:	bf 0b       	sbc	r27, r31
     66c:	a4 30       	cpi	r26, 0x04	; 4
     66e:	b1 05       	cpc	r27, r1
     670:	e1 f4       	brne	.+56     	; 0x6aa <setMaxUitrol+0x56>
		i = i + (val[1] * 100);
     672:	29 81       	ldd	r18, Y+1	; 0x01
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	84 e6       	ldi	r24, 0x64	; 100
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	28 9f       	mul	r18, r24
     67c:	a0 01       	movw	r20, r0
     67e:	29 9f       	mul	r18, r25
     680:	50 0d       	add	r21, r0
     682:	38 9f       	mul	r19, r24
     684:	50 0d       	add	r21, r0
     686:	11 24       	eor	r1, r1
		i = i + (val[2] * 10);
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	9c 01       	movw	r18, r24
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	28 0f       	add	r18, r24
     69c:	39 1f       	adc	r19, r25
     69e:	24 0f       	add	r18, r20
     6a0:	35 1f       	adc	r19, r21
		i = i + val[3];
     6a2:	8b 81       	ldd	r24, Y+3	; 0x03
     6a4:	28 0f       	add	r18, r24
     6a6:	31 1d       	adc	r19, r1
     6a8:	18 c0       	rjmp	.+48     	; 0x6da <setMaxUitrol+0x86>
	}
	else if(strlen(val) == 3) {
     6aa:	a3 30       	cpi	r26, 0x03	; 3
     6ac:	b1 05       	cpc	r27, r1
     6ae:	81 f4       	brne	.+32     	; 0x6d0 <setMaxUitrol+0x7c>
		i = i + (val[1] * 10);
     6b0:	29 81       	ldd	r18, Y+1	; 0x01
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	c9 01       	movw	r24, r18
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	9c 01       	movw	r18, r24
     6bc:	22 0f       	add	r18, r18
     6be:	33 1f       	adc	r19, r19
     6c0:	22 0f       	add	r18, r18
     6c2:	33 1f       	adc	r19, r19
     6c4:	28 0f       	add	r18, r24
     6c6:	39 1f       	adc	r19, r25
		i = i + val[2];
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	28 0f       	add	r18, r24
     6cc:	31 1d       	adc	r19, r1
     6ce:	05 c0       	rjmp	.+10     	; 0x6da <setMaxUitrol+0x86>
	}
	else if(strlen(val) == 2) {
     6d0:	a2 30       	cpi	r26, 0x02	; 2
     6d2:	b1 05       	cpc	r27, r1
     6d4:	11 f4       	brne	.+4      	; 0x6da <setMaxUitrol+0x86>
		i = i + val[1];
     6d6:	29 81       	ldd	r18, Y+1	; 0x01
     6d8:	30 e0       	ldi	r19, 0x00	; 0
	}		
	
	maxUitrol = i;
     6da:	30 93 1e 01 	sts	0x011E, r19
     6de:	20 93 1d 01 	sts	0x011D, r18
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <getStatus>:

int getStatus() {
	return state;
}
     6e8:	80 91 36 01 	lds	r24, 0x0136
     6ec:	90 91 37 01 	lds	r25, 0x0137
     6f0:	08 95       	ret

000006f2 <ledHandler>:

void ledHandler() {
	if(state == 0) {
     6f2:	80 91 36 01 	lds	r24, 0x0136
     6f6:	90 91 37 01 	lds	r25, 0x0137
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	21 f4       	brne	.+8      	; 0x706 <ledHandler+0x14>
		setYellowLed(0);
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setYellowLed>
	}
	
	if(state == 1 && progression < maxUitrol && isWorking == 0) {
     706:	80 91 36 01 	lds	r24, 0x0136
     70a:	90 91 37 01 	lds	r25, 0x0137
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	91 05       	cpc	r25, r1
     712:	09 f0       	breq	.+2      	; 0x716 <ledHandler+0x24>
     714:	41 c0       	rjmp	.+130    	; 0x798 <ledHandler+0xa6>
     716:	40 91 34 01 	lds	r20, 0x0134
     71a:	50 91 35 01 	lds	r21, 0x0135
     71e:	20 91 1d 01 	lds	r18, 0x011D
     722:	30 91 1e 01 	lds	r19, 0x011E
     726:	42 17       	cp	r20, r18
     728:	53 07       	cpc	r21, r19
     72a:	b4 f5       	brge	.+108    	; 0x798 <ledHandler+0xa6>
     72c:	20 91 30 01 	lds	r18, 0x0130
     730:	30 91 31 01 	lds	r19, 0x0131
     734:	21 15       	cp	r18, r1
     736:	31 05       	cpc	r19, r1
     738:	09 f0       	breq	.+2      	; 0x73c <ledHandler+0x4a>
     73a:	7d c0       	rjmp	.+250    	; 0x836 <ledHandler+0x144>
		isWorking = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	90 93 31 01 	sts	0x0131, r25
     744:	80 93 30 01 	sts	0x0130, r24
     748:	8f e3       	ldi	r24, 0x3F	; 63
     74a:	92 e4       	ldi	r25, 0x42	; 66
     74c:	af e0       	ldi	r26, 0x0F	; 15
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	90 40       	sbci	r25, 0x00	; 0
     752:	a0 40       	sbci	r26, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <ledHandler+0x5c>
     756:	00 c0       	rjmp	.+0      	; 0x758 <ledHandler+0x66>
     758:	00 00       	nop
		_delay_ms(5000);
		setYellowLed(1);
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setYellowLed>
     762:	8f e3       	ldi	r24, 0x3F	; 63
     764:	92 e4       	ldi	r25, 0x42	; 66
     766:	af e0       	ldi	r26, 0x0F	; 15
     768:	81 50       	subi	r24, 0x01	; 1
     76a:	90 40       	sbci	r25, 0x00	; 0
     76c:	a0 40       	sbci	r26, 0x00	; 0
     76e:	e1 f7       	brne	.-8      	; 0x768 <ledHandler+0x76>
     770:	00 c0       	rjmp	.+0      	; 0x772 <ledHandler+0x80>
     772:	00 00       	nop
		_delay_ms(5000);
		setYellowLed(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setYellowLed>
		progression++;
     77c:	80 91 34 01 	lds	r24, 0x0134
     780:	90 91 35 01 	lds	r25, 0x0135
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	90 93 35 01 	sts	0x0135, r25
     78a:	80 93 34 01 	sts	0x0134, r24
		isWorking = 0;
     78e:	10 92 31 01 	sts	0x0131, r1
     792:	10 92 30 01 	sts	0x0130, r1
     796:	40 c0       	rjmp	.+128    	; 0x818 <ledHandler+0x126>
	}
	else if(state == 2 && progression > 0 && isWorking == 0) {
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	91 05       	cpc	r25, r1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <ledHandler+0xae>
     79e:	4b c0       	rjmp	.+150    	; 0x836 <ledHandler+0x144>
     7a0:	80 91 34 01 	lds	r24, 0x0134
     7a4:	90 91 35 01 	lds	r25, 0x0135
     7a8:	18 16       	cp	r1, r24
     7aa:	19 06       	cpc	r1, r25
     7ac:	0c f0       	brlt	.+2      	; 0x7b0 <ledHandler+0xbe>
     7ae:	51 c0       	rjmp	.+162    	; 0x852 <ledHandler+0x160>
     7b0:	80 91 30 01 	lds	r24, 0x0130
     7b4:	90 91 31 01 	lds	r25, 0x0131
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	09 f0       	breq	.+2      	; 0x7be <ledHandler+0xcc>
     7bc:	52 c0       	rjmp	.+164    	; 0x862 <ledHandler+0x170>
		isWorking = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 31 01 	sts	0x0131, r25
     7c6:	80 93 30 01 	sts	0x0130, r24
     7ca:	8f e3       	ldi	r24, 0x3F	; 63
     7cc:	92 e4       	ldi	r25, 0x42	; 66
     7ce:	af e0       	ldi	r26, 0x0F	; 15
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	90 40       	sbci	r25, 0x00	; 0
     7d4:	a0 40       	sbci	r26, 0x00	; 0
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <ledHandler+0xde>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <ledHandler+0xe8>
     7da:	00 00       	nop
		_delay_ms(5000);
		setYellowLed(1);
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setYellowLed>
     7e4:	8f e3       	ldi	r24, 0x3F	; 63
     7e6:	92 e4       	ldi	r25, 0x42	; 66
     7e8:	af e0       	ldi	r26, 0x0F	; 15
     7ea:	81 50       	subi	r24, 0x01	; 1
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	a0 40       	sbci	r26, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <ledHandler+0xf8>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <ledHandler+0x102>
     7f4:	00 00       	nop
		_delay_ms(5000);
		setYellowLed(0);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <setYellowLed>
		progression--;
     7fe:	80 91 34 01 	lds	r24, 0x0134
     802:	90 91 35 01 	lds	r25, 0x0135
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	90 93 35 01 	sts	0x0135, r25
     80c:	80 93 34 01 	sts	0x0134, r24
		isWorking = 0;
     810:	10 92 31 01 	sts	0x0131, r1
     814:	10 92 30 01 	sts	0x0130, r1
	}
	
	//set to idle when done
	if(state == 2 && progression <= 0 || state == 1 && progression >= maxUitrol) {
     818:	80 91 36 01 	lds	r24, 0x0136
     81c:	90 91 37 01 	lds	r25, 0x0137
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	91 05       	cpc	r25, r1
     824:	41 f4       	brne	.+16     	; 0x836 <ledHandler+0x144>
     826:	80 91 34 01 	lds	r24, 0x0134
     82a:	90 91 35 01 	lds	r25, 0x0135
     82e:	18 16       	cp	r1, r24
     830:	19 06       	cpc	r1, r25
     832:	bc f0       	brlt	.+46     	; 0x862 <ledHandler+0x170>
     834:	0e c0       	rjmp	.+28     	; 0x852 <ledHandler+0x160>
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	91 05       	cpc	r25, r1
     83a:	99 f4       	brne	.+38     	; 0x862 <ledHandler+0x170>
     83c:	20 91 34 01 	lds	r18, 0x0134
     840:	30 91 35 01 	lds	r19, 0x0135
     844:	80 91 1d 01 	lds	r24, 0x011D
     848:	90 91 1e 01 	lds	r25, 0x011E
     84c:	28 17       	cp	r18, r24
     84e:	39 07       	cpc	r19, r25
     850:	44 f0       	brlt	.+16     	; 0x862 <ledHandler+0x170>
		state = 0;
     852:	10 92 37 01 	sts	0x0137, r1
     856:	10 92 36 01 	sts	0x0136, r1
		interrupt = 0;
     85a:	10 92 33 01 	sts	0x0133, r1
     85e:	10 92 32 01 	sts	0x0132, r1
     862:	08 95       	ret

00000864 <sendMsg>:
	
		
	}*/
}

void sendMsg(int val) {
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2a 97       	sbiw	r28, 0x0a	; 10
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
	char buffer [10];
	sprintf(buffer, "%u", val);
     87c:	00 d0       	rcall	.+0      	; 0x87e <sendMsg+0x1a>
     87e:	00 d0       	rcall	.+0      	; 0x880 <sendMsg+0x1c>
     880:	00 d0       	rcall	.+0      	; 0x882 <sendMsg+0x1e>
     882:	ed b7       	in	r30, 0x3d	; 61
     884:	fe b7       	in	r31, 0x3e	; 62
     886:	31 96       	adiw	r30, 0x01	; 1
     888:	8e 01       	movw	r16, r28
     88a:	0f 5f       	subi	r16, 0xFF	; 255
     88c:	1f 4f       	sbci	r17, 0xFF	; 255
     88e:	ad b7       	in	r26, 0x3d	; 61
     890:	be b7       	in	r27, 0x3e	; 62
     892:	12 96       	adiw	r26, 0x02	; 2
     894:	1c 93       	st	X, r17
     896:	0e 93       	st	-X, r16
     898:	11 97       	sbiw	r26, 0x01	; 1
     89a:	2a e1       	ldi	r18, 0x1A	; 26
     89c:	31 e0       	ldi	r19, 0x01	; 1
     89e:	33 83       	std	Z+3, r19	; 0x03
     8a0:	22 83       	std	Z+2, r18	; 0x02
     8a2:	95 83       	std	Z+5, r25	; 0x05
     8a4:	84 83       	std	Z+4, r24	; 0x04
     8a6:	0e 94 a2 09 	call	0x1344	; 0x1344 <sprintf>
	transmitln(buffer);
     8aa:	8d b7       	in	r24, 0x3d	; 61
     8ac:	9e b7       	in	r25, 0x3e	; 62
     8ae:	06 96       	adiw	r24, 0x06	; 6
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	9e bf       	out	0x3e, r25	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	8d bf       	out	0x3d, r24	; 61
     8ba:	c8 01       	movw	r24, r16
     8bc:	0e 94 80 05 	call	0xb00	; 0xb00 <transmitln>
     8c0:	2a 96       	adiw	r28, 0x0a	; 10
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	08 95       	ret

000008d6 <getTemp>:

char sendBuffer[20];

uint16_t getTemp()
{
	uint16_t degreesC = read_adc(0);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	float voltage = degreesC * 5.0;
     8de:	bc 01       	movw	r22, r24
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 40 07 	call	0xe80	; 0xe80 <__floatunsisf>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 ea       	ldi	r20, 0xA0	; 160
     8ee:	50 e4       	ldi	r21, 0x40	; 64
     8f0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__mulsf3>
	voltage /= 1024.0;
     8f4:	46 2f       	mov	r20, r22
     8f6:	57 2f       	mov	r21, r23
     8f8:	68 2f       	mov	r22, r24
     8fa:	79 2f       	mov	r23, r25
     8fc:	cb 01       	movw	r24, r22
     8fe:	ba 01       	movw	r22, r20
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e8       	ldi	r20, 0x80	; 128
     906:	5a e3       	ldi	r21, 0x3A	; 58
     908:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__mulsf3>
	float celsius = (voltage - 0.5) * 100;
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	5f e3       	ldi	r21, 0x3F	; 63
     914:	0e 94 aa 06 	call	0xd54	; 0xd54 <__subsf3>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	48 ec       	ldi	r20, 0xC8	; 200
     91e:	52 e4       	ldi	r21, 0x42	; 66
     920:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__mulsf3>
	celsius *= 100;
     924:	46 2f       	mov	r20, r22
     926:	57 2f       	mov	r21, r23
     928:	68 2f       	mov	r22, r24
     92a:	79 2f       	mov	r23, r25
     92c:	cb 01       	movw	r24, r22
     92e:	ba 01       	movw	r22, r20
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	48 ec       	ldi	r20, 0xC8	; 200
     936:	52 e4       	ldi	r21, 0x42	; 66
     938:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__mulsf3>
	return (uint16_t)celsius;
     93c:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixunssfsi>
}
     940:	86 2f       	mov	r24, r22
     942:	97 2f       	mov	r25, r23
     944:	08 95       	ret

00000946 <sendTemp>:

void sendTemp() {
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	2a 97       	sbiw	r28, 0x0a	; 10
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
	char buffer [10];
	sprintf(buffer, "%u", getTemp());
     95e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <getTemp>
     962:	00 d0       	rcall	.+0      	; 0x964 <sendTemp+0x1e>
     964:	00 d0       	rcall	.+0      	; 0x966 <sendTemp+0x20>
     966:	00 d0       	rcall	.+0      	; 0x968 <sendTemp+0x22>
     968:	ed b7       	in	r30, 0x3d	; 61
     96a:	fe b7       	in	r31, 0x3e	; 62
     96c:	31 96       	adiw	r30, 0x01	; 1
     96e:	8e 01       	movw	r16, r28
     970:	0f 5f       	subi	r16, 0xFF	; 255
     972:	1f 4f       	sbci	r17, 0xFF	; 255
     974:	ad b7       	in	r26, 0x3d	; 61
     976:	be b7       	in	r27, 0x3e	; 62
     978:	12 96       	adiw	r26, 0x02	; 2
     97a:	1c 93       	st	X, r17
     97c:	0e 93       	st	-X, r16
     97e:	11 97       	sbiw	r26, 0x01	; 1
     980:	2f e1       	ldi	r18, 0x1F	; 31
     982:	31 e0       	ldi	r19, 0x01	; 1
     984:	33 83       	std	Z+3, r19	; 0x03
     986:	22 83       	std	Z+2, r18	; 0x02
     988:	95 83       	std	Z+5, r25	; 0x05
     98a:	84 83       	std	Z+4, r24	; 0x04
     98c:	0e 94 a2 09 	call	0x1344	; 0x1344 <sprintf>
	sendInfo(buffer);
     990:	8d b7       	in	r24, 0x3d	; 61
     992:	9e b7       	in	r25, 0x3e	; 62
     994:	06 96       	adiw	r24, 0x06	; 6
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	9e bf       	out	0x3e, r25	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	8d bf       	out	0x3d, r24	; 61
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <sendInfo>
     9a6:	2a 96       	adiw	r28, 0x0a	; 10
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	08 95       	ret

000009bc <uart_init>:
#define UBBRVAL 51

void uart_init()
{
	// Set baudrate 19200
	UBRR0H = 0;
     9bc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     9c0:	83 e3       	ldi	r24, 0x33	; 51
     9c2:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     9c6:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     9ca:	88 e1       	ldi	r24, 0x18	; 24
     9cc:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     9d0:	86 e0       	ldi	r24, 0x06	; 6
     9d2:	80 93 c2 00 	sts	0x00C2, r24
	//Effe handshaken
	handshake();
     9d6:	0e 94 ba 01 	call	0x374	; 0x374 <handshake>
     9da:	08 95       	ret

000009dc <get_lightpercent>:
#include <stdio.h>
#include <avr/sfr_defs.h>
#include "serial.h"

uint16_t get_lightpercent(){								// Get % light
	uint16_t percent = read_adc(3);							//0 - 1024 light
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	return percent;
}
     9e4:	08 95       	ret

000009e6 <sendLight>:

void sendLight(void){
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	2a 97       	sbiw	r28, 0x0a	; 10
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
	char buffer [10];
	sprintf(buffer, "%u", get_lightpercent());
     9fe:	0e 94 ee 04 	call	0x9dc	; 0x9dc <get_lightpercent>
     a02:	00 d0       	rcall	.+0      	; 0xa04 <sendLight+0x1e>
     a04:	00 d0       	rcall	.+0      	; 0xa06 <sendLight+0x20>
     a06:	00 d0       	rcall	.+0      	; 0xa08 <sendLight+0x22>
     a08:	ed b7       	in	r30, 0x3d	; 61
     a0a:	fe b7       	in	r31, 0x3e	; 62
     a0c:	31 96       	adiw	r30, 0x01	; 1
     a0e:	8e 01       	movw	r16, r28
     a10:	0f 5f       	subi	r16, 0xFF	; 255
     a12:	1f 4f       	sbci	r17, 0xFF	; 255
     a14:	ad b7       	in	r26, 0x3d	; 61
     a16:	be b7       	in	r27, 0x3e	; 62
     a18:	12 96       	adiw	r26, 0x02	; 2
     a1a:	1c 93       	st	X, r17
     a1c:	0e 93       	st	-X, r16
     a1e:	11 97       	sbiw	r26, 0x01	; 1
     a20:	22 e2       	ldi	r18, 0x22	; 34
     a22:	31 e0       	ldi	r19, 0x01	; 1
     a24:	33 83       	std	Z+3, r19	; 0x03
     a26:	22 83       	std	Z+2, r18	; 0x02
     a28:	95 83       	std	Z+5, r25	; 0x05
     a2a:	84 83       	std	Z+4, r24	; 0x04
     a2c:	0e 94 a2 09 	call	0x1344	; 0x1344 <sprintf>
	sendInfo(buffer);
     a30:	8d b7       	in	r24, 0x3d	; 61
     a32:	9e b7       	in	r25, 0x3e	; 62
     a34:	06 96       	adiw	r24, 0x06	; 6
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	9e bf       	out	0x3e, r25	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	8d bf       	out	0x3d, r24	; 61
     a40:	c8 01       	movw	r24, r16
     a42:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <sendInfo>
     a46:	2a 96       	adiw	r28, 0x0a	; 10
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <main>:
char bufferTemp[20];
char bufferFinal;

int main(void)
{
	uart_init();
     a5c:	0e 94 de 04 	call	0x9bc	; 0x9bc <uart_init>
	initUltraSensor();
     a60:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <initUltraSensor>
	init_adc();
     a64:	0e 94 53 00 	call	0xa6	; 0xa6 <init_adc>
	initLeds();
     a68:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <initLeds>
	
	setMode(1);
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <setMode>

	SCH_Init_T1();
     a74:	0e 94 05 01 	call	0x20a	; 0x20a <SCH_Init_T1>
	
	SCH_Add_Task(ledHandler,0,1); // Add ledhandler task
     a78:	89 e7       	ldi	r24, 0x79	; 121
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	0e 94 7a 00 	call	0xf4	; 0xf4 <SCH_Add_Task>
	SCH_Add_Task(checkCommands,0,1); // Add commands task
     a88:	82 ef       	ldi	r24, 0xF2	; 242
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	41 e0       	ldi	r20, 0x01	; 1
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	0e 94 7a 00 	call	0xf4	; 0xf4 <SCH_Add_Task>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	9d e0       	ldi	r25, 0x0D	; 13
     a9c:	a3 e0       	ldi	r26, 0x03	; 3
     a9e:	81 50       	subi	r24, 0x01	; 1
     aa0:	90 40       	sbci	r25, 0x00	; 0
     aa2:	a0 40       	sbci	r26, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <main+0x42>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <main+0x4c>
     aa8:	00 00       	nop
	//SCH_Add_Task(sendPulse,0,1); // Add sendinfo task
	//SCH_Add_Task(sendDistInfo,0,5); // Add sendinfo task
	
	_delay_ms(1000);
	
	SCH_Start();
     aaa:	0e 94 16 01 	call	0x22c	; 0x22c <SCH_Start>
	
	//DDRD = 0b11101000;
	
    while(1)
    {
		SCH_Dispatch_Tasks(); 
     aae:	0e 94 ce 00 	call	0x19c	; 0x19c <SCH_Dispatch_Tasks>
     ab2:	fd cf       	rjmp	.-6      	; 0xaae <main+0x52>

00000ab4 <send>:
char sendBuffer[20];
int poep = 0;

void send(uint8_t data)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
     ab4:	e0 ec       	ldi	r30, 0xC0	; 192
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	90 81       	ld	r25, Z
     aba:	95 ff       	sbrs	r25, 5
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <send+0x4>
	UDR0 = data;
     abe:	80 93 c6 00 	sts	0x00C6, r24
}
     ac2:	08 95       	ret

00000ac4 <receive>:

char receive()
{
	if(poep == 0) {
     ac4:	80 91 38 01 	lds	r24, 0x0138
     ac8:	90 91 39 01 	lds	r25, 0x0139
     acc:	00 97       	sbiw	r24, 0x00	; 0
     ace:	41 f4       	brne	.+16     	; 0xae0 <receive+0x1c>
		loop_until_bit_is_set(UCSR0A, RXC0);
     ad0:	e0 ec       	ldi	r30, 0xC0	; 192
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	88 23       	and	r24, r24
     ad8:	ec f7       	brge	.-6      	; 0xad4 <receive+0x10>
		return UDR0;
     ada:	80 91 c6 00 	lds	r24, 0x00C6
     ade:	08 95       	ret
	}	
	
	if(UCSR0A & _BV(RXC0) && poep == 1) {
     ae0:	20 91 c0 00 	lds	r18, 0x00C0
     ae4:	22 23       	and	r18, r18
     ae6:	34 f4       	brge	.+12     	; 0xaf4 <receive+0x30>
     ae8:	81 30       	cpi	r24, 0x01	; 1
     aea:	91 05       	cpc	r25, r1
     aec:	19 f4       	brne	.+6      	; 0xaf4 <receive+0x30>
		return UDR0;
     aee:	80 91 c6 00 	lds	r24, 0x00C6
     af2:	08 95       	ret
	}	 
}
     af4:	08 95       	ret

00000af6 <setPoep>:

void setPoep(int val) {
	poep = val;
     af6:	90 93 39 01 	sts	0x0139, r25
     afa:	80 93 38 01 	sts	0x0138, r24
}
     afe:	08 95       	ret

00000b00 <transmitln>:

void transmitln(const char* line) {//const char* -> string in de functie definitie
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	f8 2e       	mov	r15, r24
     b0e:	e9 2e       	mov	r14, r25
	for(size_t i=0; i<strlen(line); i++){
     b10:	08 2f       	mov	r16, r24
     b12:	19 2f       	mov	r17, r25
     b14:	c0 e0       	ldi	r28, 0x00	; 0
     b16:	d0 e0       	ldi	r29, 0x00	; 0
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <transmitln+0x26>
		send(line[i]);
     b1a:	f8 01       	movw	r30, r16
     b1c:	81 91       	ld	r24, Z+
     b1e:	8f 01       	movw	r16, r30
     b20:	0e 94 5a 05 	call	0xab4	; 0xab4 <send>
void setPoep(int val) {
	poep = val;
}

void transmitln(const char* line) {//const char* -> string in de functie definitie
	for(size_t i=0; i<strlen(line); i++){
     b24:	21 96       	adiw	r28, 0x01	; 1
     b26:	ef 2d       	mov	r30, r15
     b28:	fe 2d       	mov	r31, r14
     b2a:	df 01       	movw	r26, r30
     b2c:	0d 90       	ld	r0, X+
     b2e:	00 20       	and	r0, r0
     b30:	e9 f7       	brne	.-6      	; 0xb2c <transmitln+0x2c>
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	ae 1b       	sub	r26, r30
     b36:	bf 0b       	sbc	r27, r31
     b38:	ca 17       	cp	r28, r26
     b3a:	db 07       	cpc	r29, r27
     b3c:	70 f3       	brcs	.-36     	; 0xb1a <transmitln+0x1a>
		send(line[i]);
	}
	send('\n');
     b3e:	8a e0       	ldi	r24, 0x0A	; 10
     b40:	0e 94 5a 05 	call	0xab4	; 0xab4 <send>
}	
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	08 95       	ret

00000b52 <send_char>:

void send_char(char c)
{
	while ((UCSR0A & (1 << UDRE0)) == 0) {};
     b52:	e0 ec       	ldi	r30, 0xC0	; 192
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	90 81       	ld	r25, Z
     b58:	95 ff       	sbrs	r25, 5
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <send_char+0x4>
	UDR0 = c;
     b5c:	80 93 c6 00 	sts	0x00C6, r24
}
     b60:	08 95       	ret

00000b62 <send_string>:

void send_string(char s[])
{
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	8c 01       	movw	r16, r24
	int i =0;
	
	//Make sure its 4 bytes
	switch(strlen(s)) {
     b6c:	e8 2f       	mov	r30, r24
     b6e:	f1 2f       	mov	r31, r17
     b70:	df 01       	movw	r26, r30
     b72:	0d 90       	ld	r0, X+
     b74:	00 20       	and	r0, r0
     b76:	e9 f7       	brne	.-6      	; 0xb72 <send_string+0x10>
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	ae 1b       	sub	r26, r30
     b7c:	bf 0b       	sbc	r27, r31
     b7e:	a6 30       	cpi	r26, 0x06	; 6
     b80:	b1 05       	cpc	r27, r1
     b82:	39 f0       	breq	.+14     	; 0xb92 <send_string+0x30>
     b84:	a7 30       	cpi	r26, 0x07	; 7
     b86:	b1 05       	cpc	r27, r1
     b88:	c9 f0       	breq	.+50     	; 0xbbc <send_string+0x5a>
     b8a:	a5 30       	cpi	r26, 0x05	; 5
     b8c:	b1 05       	cpc	r27, r1
     b8e:	c9 f4       	brne	.+50     	; 0xbc2 <send_string+0x60>
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <send_string+0x36>
			for(int i; i<3; i++) {
				send_char(0x30);
			}
			break;
		case 6:
			for(int i; i<2; i++) {
     b92:	c0 e0       	ldi	r28, 0x00	; 0
     b94:	d0 e0       	ldi	r29, 0x00	; 0
     b96:	0a c0       	rjmp	.+20     	; 0xbac <send_string+0x4a>
	int i =0;
	
	//Make sure its 4 bytes
	switch(strlen(s)) {
		case 5:
			for(int i; i<3; i++) {
     b98:	c0 e0       	ldi	r28, 0x00	; 0
     b9a:	d0 e0       	ldi	r29, 0x00	; 0
				send_char(0x30);
     b9c:	80 e3       	ldi	r24, 0x30	; 48
     b9e:	0e 94 a9 05 	call	0xb52	; 0xb52 <send_char>
	int i =0;
	
	//Make sure its 4 bytes
	switch(strlen(s)) {
		case 5:
			for(int i; i<3; i++) {
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	c3 30       	cpi	r28, 0x03	; 3
     ba6:	d1 05       	cpc	r29, r1
     ba8:	c9 f7       	brne	.-14     	; 0xb9c <send_string+0x3a>
     baa:	0b c0       	rjmp	.+22     	; 0xbc2 <send_string+0x60>
				send_char(0x30);
			}
			break;
		case 6:
			for(int i; i<2; i++) {
				send_char(0x30);
     bac:	80 e3       	ldi	r24, 0x30	; 48
     bae:	0e 94 a9 05 	call	0xb52	; 0xb52 <send_char>
			for(int i; i<3; i++) {
				send_char(0x30);
			}
			break;
		case 6:
			for(int i; i<2; i++) {
     bb2:	21 96       	adiw	r28, 0x01	; 1
     bb4:	c2 30       	cpi	r28, 0x02	; 2
     bb6:	d1 05       	cpc	r29, r1
     bb8:	c9 f7       	brne	.-14     	; 0xbac <send_string+0x4a>
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <send_string+0x60>
				send_char(0x30);
			}
			break;
		case 7:
			send_char(0x30);
     bbc:	80 e3       	ldi	r24, 0x30	; 48
     bbe:	0e 94 a9 05 	call	0xb52	; 0xb52 <send_char>
			break;
	}
	
	//Send the value
	while (s[i] != 0x00)
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 81       	ld	r24, Z
     bc6:	88 23       	and	r24, r24
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <send_string+0x76>
{
	while ((UCSR0A & (1 << UDRE0)) == 0) {};
	UDR0 = c;
}

void send_string(char s[])
     bca:	e8 01       	movw	r28, r16
     bcc:	21 96       	adiw	r28, 0x01	; 1
	}
	
	//Send the value
	while (s[i] != 0x00)
	{
		send_char(s[i]);
     bce:	0e 94 a9 05 	call	0xb52	; 0xb52 <send_char>
			send_char(0x30);
			break;
	}
	
	//Send the value
	while (s[i] != 0x00)
     bd2:	89 91       	ld	r24, Y+
     bd4:	88 23       	and	r24, r24
     bd6:	d9 f7       	brne	.-10     	; 0xbce <send_string+0x6c>
	{
		send_char(s[i]);
		i++;
	}
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <sendInfo>:

void sendInfo(const char* buff) {
	transmitln(buff); // verstuur variabele "woord"
     be2:	0e 94 80 05 	call	0xb00	; 0xb00 <transmitln>
     be6:	87 ea       	ldi	r24, 0xA7	; 167
     be8:	91 e6       	ldi	r25, 0x61	; 97
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <sendInfo+0x8>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <sendInfo+0xe>
     bf0:	00 00       	nop
	_delay_ms(100); // wacht een seconde
     bf2:	08 95       	ret

00000bf4 <initUltraSensor>:
uint16_t numuS;
uint8_t oldSREG;
uint16_t sendValue;

void initUltraSensor() {
	DDRC |= (1<<DDC5) | (1<<DDC4);
     bf4:	87 b1       	in	r24, 0x07	; 7
     bf6:	80 63       	ori	r24, 0x30	; 48
     bf8:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<DDC5);						// Set Pin C5 as input to read Echo
     bfa:	3d 98       	cbi	0x07, 5	; 7
	PORTC |= (1<<PORTC5);					// Enable pull up on C5
     bfc:	45 9a       	sbi	0x08, 5	; 8
	PORTC &= ~(1<<PC4);						// Init C4 as low (trigger)
     bfe:	44 98       	cbi	0x08, 4	; 8

	PRR &= ~(1<<PRTIM1);					// To activate timer1 module
     c00:	e4 e6       	ldi	r30, 0x64	; 100
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	80 83       	st	Z, r24
	TCNT1 = 0;								// Initial timer value
     c0a:	10 92 85 00 	sts	0x0085, r1
     c0e:	10 92 84 00 	sts	0x0084, r1
	TCCR1B |= (1<<CS10);					// Timer without prescaller. Since default clock for atmega328p is 1Mhz period is 1uS
     c12:	e1 e8       	ldi	r30, 0x81	; 129
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	81 60       	ori	r24, 0x01	; 1
     c1a:	80 83       	st	Z, r24
	TCCR1B |= (1<<ICES1);					// First capture on rising edge
     c1c:	80 81       	ld	r24, Z
     c1e:	80 64       	ori	r24, 0x40	; 64
     c20:	80 83       	st	Z, r24

	PCICR = (1<<PCIE1);						// Enable PCINT[14:8] we use pin C5 which is PCINT13
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 = (1<<PCINT13);					// Enable C5 interrupt
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	80 93 6c 00 	sts	0x006C, r24
	sei();									// Enable Global Interrupts
     c2e:	78 94       	sei
}
     c30:	08 95       	ret

00000c32 <Trigger_Pulse>:

void Trigger_Pulse()
{
	PORTC |= (1<<PC4);						// Set trigger high
     c32:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	8a 95       	dec	r24
     c38:	f1 f7       	brne	.-4      	; 0xc36 <Trigger_Pulse+0x4>
     c3a:	00 00       	nop
	_delay_us(10);							// for 10uS
	PORTC &= ~(1<<PC4);						// to trigger the ultrasonic module
     c3c:	44 98       	cbi	0x08, 4	; 8
}
     c3e:	08 95       	ret

00000c40 <__vector_4>:

ISR(PCINT1_vect) {
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
	if (bit_is_set(PINC,PC5)) {					// Checks if echo is high
     c4e:	35 9b       	sbis	0x06, 5	; 6
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <__vector_4+0x1c>
		TCNT1 = 0;								// Reset Timer
     c52:	10 92 85 00 	sts	0x0085, r1
     c56:	10 92 84 00 	sts	0x0084, r1
     c5a:	0b c0       	rjmp	.+22     	; 0xc72 <__vector_4+0x32>
	} else {
		numuS = TCNT1;							// Save Timer value
     c5c:	80 91 84 00 	lds	r24, 0x0084
     c60:	90 91 85 00 	lds	r25, 0x0085
     c64:	90 93 44 03 	sts	0x0344, r25
     c68:	80 93 43 03 	sts	0x0343, r24
		uint8_t oldSREG = SREG;
     c6c:	8f b7       	in	r24, 0x3f	; 63
		cli();									// Disable Global interrupts
     c6e:	f8 94       	cli

		SREG = oldSREG;							// Enable interrupts
     c70:	8f bf       	out	0x3f, r24	; 63
	}
}
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <getDistance>:

uint16_t getDistance(void) {
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
	int i = numuS;
     c84:	c0 91 43 03 	lds	r28, 0x0343
     c88:	d0 91 44 03 	lds	r29, 0x0344
	
	while(i == numuS) {
		Trigger_Pulse();
     c8c:	0e 94 19 06 	call	0xc32	; 0xc32 <Trigger_Pulse>
}

uint16_t getDistance(void) {
	int i = numuS;
	
	while(i == numuS) {
     c90:	80 91 43 03 	lds	r24, 0x0343
     c94:	90 91 44 03 	lds	r25, 0x0344
     c98:	c8 17       	cp	r28, r24
     c9a:	d9 07       	cpc	r29, r25
     c9c:	b9 f3       	breq	.-18     	; 0xc8c <getDistance+0xc>
		Trigger_Pulse();
	}
	
	sendValue = numuS / 58;
     c9e:	6a e3       	ldi	r22, 0x3A	; 58
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 31 08 	call	0x1062	; 0x1062 <__udivmodhi4>
     ca6:	86 2f       	mov	r24, r22
     ca8:	97 2f       	mov	r25, r23
     caa:	60 93 41 03 	sts	0x0341, r22
     cae:	70 93 42 03 	sts	0x0342, r23
	
	return sendValue;
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <sendDistance>:

void sendDistance(void) {	
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	64 97       	sbiw	r28, 0x14	; 20
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
	int i = numuS;
     cd0:	00 91 43 03 	lds	r16, 0x0343
     cd4:	10 91 44 03 	lds	r17, 0x0344
	
	while(i == numuS) {
		Trigger_Pulse();
     cd8:	0e 94 19 06 	call	0xc32	; 0xc32 <Trigger_Pulse>
}

void sendDistance(void) {	
	int i = numuS;
	
	while(i == numuS) {
     cdc:	80 91 43 03 	lds	r24, 0x0343
     ce0:	90 91 44 03 	lds	r25, 0x0344
     ce4:	08 17       	cp	r16, r24
     ce6:	19 07       	cpc	r17, r25
     ce8:	b9 f3       	breq	.-18     	; 0xcd8 <sendDistance+0x20>
		Trigger_Pulse();
	}
	
	sendValue = numuS / 58;
     cea:	6a e3       	ldi	r22, 0x3A	; 58
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	0e 94 31 08 	call	0x1062	; 0x1062 <__udivmodhi4>
     cf2:	60 93 41 03 	sts	0x0341, r22
     cf6:	70 93 42 03 	sts	0x0342, r23
	
	char buffer [20];
	sprintf(buffer, "%u", sendValue);
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <sendDistance+0x44>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <sendDistance+0x46>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <sendDistance+0x48>
     d00:	ed b7       	in	r30, 0x3d	; 61
     d02:	fe b7       	in	r31, 0x3e	; 62
     d04:	31 96       	adiw	r30, 0x01	; 1
     d06:	8e 01       	movw	r16, r28
     d08:	0f 5f       	subi	r16, 0xFF	; 255
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	ad b7       	in	r26, 0x3d	; 61
     d0e:	be b7       	in	r27, 0x3e	; 62
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	1c 93       	st	X, r17
     d14:	0e 93       	st	-X, r16
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	85 e2       	ldi	r24, 0x25	; 37
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	93 83       	std	Z+3, r25	; 0x03
     d1e:	82 83       	std	Z+2, r24	; 0x02
     d20:	64 83       	std	Z+4, r22	; 0x04
     d22:	75 83       	std	Z+5, r23	; 0x05
     d24:	0e 94 a2 09 	call	0x1344	; 0x1344 <sprintf>
	sendInfo(buffer);
     d28:	8d b7       	in	r24, 0x3d	; 61
     d2a:	9e b7       	in	r25, 0x3e	; 62
     d2c:	06 96       	adiw	r24, 0x06	; 6
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	9e bf       	out	0x3e, r25	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	8d bf       	out	0x3d, r24	; 61
     d38:	c8 01       	movw	r24, r16
     d3a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <sendInfo>
     d3e:	64 96       	adiw	r28, 0x14	; 20
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <__subsf3>:
     d54:	50 58       	subi	r21, 0x80	; 128

00000d56 <__addsf3>:
     d56:	bb 27       	eor	r27, r27
     d58:	aa 27       	eor	r26, r26
     d5a:	0e d0       	rcall	.+28     	; 0xd78 <__addsf3x>
     d5c:	e5 c0       	rjmp	.+458    	; 0xf28 <__fp_round>
     d5e:	d6 d0       	rcall	.+428    	; 0xf0c <__fp_pscA>
     d60:	30 f0       	brcs	.+12     	; 0xd6e <__addsf3+0x18>
     d62:	db d0       	rcall	.+438    	; 0xf1a <__fp_pscB>
     d64:	20 f0       	brcs	.+8      	; 0xd6e <__addsf3+0x18>
     d66:	31 f4       	brne	.+12     	; 0xd74 <__addsf3+0x1e>
     d68:	9f 3f       	cpi	r25, 0xFF	; 255
     d6a:	11 f4       	brne	.+4      	; 0xd70 <__addsf3+0x1a>
     d6c:	1e f4       	brtc	.+6      	; 0xd74 <__addsf3+0x1e>
     d6e:	cb c0       	rjmp	.+406    	; 0xf06 <__fp_nan>
     d70:	0e f4       	brtc	.+2      	; 0xd74 <__addsf3+0x1e>
     d72:	e0 95       	com	r30
     d74:	e7 fb       	bst	r30, 7
     d76:	c1 c0       	rjmp	.+386    	; 0xefa <__fp_inf>

00000d78 <__addsf3x>:
     d78:	e9 2f       	mov	r30, r25
     d7a:	e7 d0       	rcall	.+462    	; 0xf4a <__fp_split3>
     d7c:	80 f3       	brcs	.-32     	; 0xd5e <__addsf3+0x8>
     d7e:	ba 17       	cp	r27, r26
     d80:	62 07       	cpc	r22, r18
     d82:	73 07       	cpc	r23, r19
     d84:	84 07       	cpc	r24, r20
     d86:	95 07       	cpc	r25, r21
     d88:	18 f0       	brcs	.+6      	; 0xd90 <__addsf3x+0x18>
     d8a:	71 f4       	brne	.+28     	; 0xda8 <__addsf3x+0x30>
     d8c:	9e f5       	brtc	.+102    	; 0xdf4 <__addsf3x+0x7c>
     d8e:	ff c0       	rjmp	.+510    	; 0xf8e <__fp_zero>
     d90:	0e f4       	brtc	.+2      	; 0xd94 <__addsf3x+0x1c>
     d92:	e0 95       	com	r30
     d94:	0b 2e       	mov	r0, r27
     d96:	ba 2f       	mov	r27, r26
     d98:	a0 2d       	mov	r26, r0
     d9a:	0b 01       	movw	r0, r22
     d9c:	b9 01       	movw	r22, r18
     d9e:	90 01       	movw	r18, r0
     da0:	0c 01       	movw	r0, r24
     da2:	ca 01       	movw	r24, r20
     da4:	a0 01       	movw	r20, r0
     da6:	11 24       	eor	r1, r1
     da8:	ff 27       	eor	r31, r31
     daa:	59 1b       	sub	r21, r25
     dac:	99 f0       	breq	.+38     	; 0xdd4 <__addsf3x+0x5c>
     dae:	59 3f       	cpi	r21, 0xF9	; 249
     db0:	50 f4       	brcc	.+20     	; 0xdc6 <__addsf3x+0x4e>
     db2:	50 3e       	cpi	r21, 0xE0	; 224
     db4:	68 f1       	brcs	.+90     	; 0xe10 <__addsf3x+0x98>
     db6:	1a 16       	cp	r1, r26
     db8:	f0 40       	sbci	r31, 0x00	; 0
     dba:	a2 2f       	mov	r26, r18
     dbc:	23 2f       	mov	r18, r19
     dbe:	34 2f       	mov	r19, r20
     dc0:	44 27       	eor	r20, r20
     dc2:	58 5f       	subi	r21, 0xF8	; 248
     dc4:	f3 cf       	rjmp	.-26     	; 0xdac <__addsf3x+0x34>
     dc6:	46 95       	lsr	r20
     dc8:	37 95       	ror	r19
     dca:	27 95       	ror	r18
     dcc:	a7 95       	ror	r26
     dce:	f0 40       	sbci	r31, 0x00	; 0
     dd0:	53 95       	inc	r21
     dd2:	c9 f7       	brne	.-14     	; 0xdc6 <__addsf3x+0x4e>
     dd4:	7e f4       	brtc	.+30     	; 0xdf4 <__addsf3x+0x7c>
     dd6:	1f 16       	cp	r1, r31
     dd8:	ba 0b       	sbc	r27, r26
     dda:	62 0b       	sbc	r22, r18
     ddc:	73 0b       	sbc	r23, r19
     dde:	84 0b       	sbc	r24, r20
     de0:	ba f0       	brmi	.+46     	; 0xe10 <__addsf3x+0x98>
     de2:	91 50       	subi	r25, 0x01	; 1
     de4:	a1 f0       	breq	.+40     	; 0xe0e <__addsf3x+0x96>
     de6:	ff 0f       	add	r31, r31
     de8:	bb 1f       	adc	r27, r27
     dea:	66 1f       	adc	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	c2 f7       	brpl	.-16     	; 0xde2 <__addsf3x+0x6a>
     df2:	0e c0       	rjmp	.+28     	; 0xe10 <__addsf3x+0x98>
     df4:	ba 0f       	add	r27, r26
     df6:	62 1f       	adc	r22, r18
     df8:	73 1f       	adc	r23, r19
     dfa:	84 1f       	adc	r24, r20
     dfc:	48 f4       	brcc	.+18     	; 0xe10 <__addsf3x+0x98>
     dfe:	87 95       	ror	r24
     e00:	77 95       	ror	r23
     e02:	67 95       	ror	r22
     e04:	b7 95       	ror	r27
     e06:	f7 95       	ror	r31
     e08:	9e 3f       	cpi	r25, 0xFE	; 254
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <__addsf3x+0x96>
     e0c:	b3 cf       	rjmp	.-154    	; 0xd74 <__addsf3+0x1e>
     e0e:	93 95       	inc	r25
     e10:	88 0f       	add	r24, r24
     e12:	08 f0       	brcs	.+2      	; 0xe16 <__addsf3x+0x9e>
     e14:	99 27       	eor	r25, r25
     e16:	ee 0f       	add	r30, r30
     e18:	97 95       	ror	r25
     e1a:	87 95       	ror	r24
     e1c:	08 95       	ret

00000e1e <__fixsfsi>:
     e1e:	04 d0       	rcall	.+8      	; 0xe28 <__fixunssfsi>
     e20:	68 94       	set
     e22:	b1 11       	cpse	r27, r1
     e24:	b5 c0       	rjmp	.+362    	; 0xf90 <__fp_szero>
     e26:	08 95       	ret

00000e28 <__fixunssfsi>:
     e28:	98 d0       	rcall	.+304    	; 0xf5a <__fp_splitA>
     e2a:	88 f0       	brcs	.+34     	; 0xe4e <__fixunssfsi+0x26>
     e2c:	9f 57       	subi	r25, 0x7F	; 127
     e2e:	90 f0       	brcs	.+36     	; 0xe54 <__fixunssfsi+0x2c>
     e30:	b9 2f       	mov	r27, r25
     e32:	99 27       	eor	r25, r25
     e34:	b7 51       	subi	r27, 0x17	; 23
     e36:	a0 f0       	brcs	.+40     	; 0xe60 <__fixunssfsi+0x38>
     e38:	d1 f0       	breq	.+52     	; 0xe6e <__fixunssfsi+0x46>
     e3a:	66 0f       	add	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	88 1f       	adc	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	1a f0       	brmi	.+6      	; 0xe4a <__fixunssfsi+0x22>
     e44:	ba 95       	dec	r27
     e46:	c9 f7       	brne	.-14     	; 0xe3a <__fixunssfsi+0x12>
     e48:	12 c0       	rjmp	.+36     	; 0xe6e <__fixunssfsi+0x46>
     e4a:	b1 30       	cpi	r27, 0x01	; 1
     e4c:	81 f0       	breq	.+32     	; 0xe6e <__fixunssfsi+0x46>
     e4e:	9f d0       	rcall	.+318    	; 0xf8e <__fp_zero>
     e50:	b1 e0       	ldi	r27, 0x01	; 1
     e52:	08 95       	ret
     e54:	9c c0       	rjmp	.+312    	; 0xf8e <__fp_zero>
     e56:	67 2f       	mov	r22, r23
     e58:	78 2f       	mov	r23, r24
     e5a:	88 27       	eor	r24, r24
     e5c:	b8 5f       	subi	r27, 0xF8	; 248
     e5e:	39 f0       	breq	.+14     	; 0xe6e <__fixunssfsi+0x46>
     e60:	b9 3f       	cpi	r27, 0xF9	; 249
     e62:	cc f3       	brlt	.-14     	; 0xe56 <__fixunssfsi+0x2e>
     e64:	86 95       	lsr	r24
     e66:	77 95       	ror	r23
     e68:	67 95       	ror	r22
     e6a:	b3 95       	inc	r27
     e6c:	d9 f7       	brne	.-10     	; 0xe64 <__fixunssfsi+0x3c>
     e6e:	3e f4       	brtc	.+14     	; 0xe7e <__fixunssfsi+0x56>
     e70:	90 95       	com	r25
     e72:	80 95       	com	r24
     e74:	70 95       	com	r23
     e76:	61 95       	neg	r22
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	8f 4f       	sbci	r24, 0xFF	; 255
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	08 95       	ret

00000e80 <__floatunsisf>:
     e80:	e8 94       	clt
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <__floatsisf+0x12>

00000e84 <__floatsisf>:
     e84:	97 fb       	bst	r25, 7
     e86:	3e f4       	brtc	.+14     	; 0xe96 <__floatsisf+0x12>
     e88:	90 95       	com	r25
     e8a:	80 95       	com	r24
     e8c:	70 95       	com	r23
     e8e:	61 95       	neg	r22
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	99 23       	and	r25, r25
     e98:	a9 f0       	breq	.+42     	; 0xec4 <__floatsisf+0x40>
     e9a:	f9 2f       	mov	r31, r25
     e9c:	96 e9       	ldi	r25, 0x96	; 150
     e9e:	bb 27       	eor	r27, r27
     ea0:	93 95       	inc	r25
     ea2:	f6 95       	lsr	r31
     ea4:	87 95       	ror	r24
     ea6:	77 95       	ror	r23
     ea8:	67 95       	ror	r22
     eaa:	b7 95       	ror	r27
     eac:	f1 11       	cpse	r31, r1
     eae:	f8 cf       	rjmp	.-16     	; 0xea0 <__floatsisf+0x1c>
     eb0:	fa f4       	brpl	.+62     	; 0xef0 <__floatsisf+0x6c>
     eb2:	bb 0f       	add	r27, r27
     eb4:	11 f4       	brne	.+4      	; 0xeba <__floatsisf+0x36>
     eb6:	60 ff       	sbrs	r22, 0
     eb8:	1b c0       	rjmp	.+54     	; 0xef0 <__floatsisf+0x6c>
     eba:	6f 5f       	subi	r22, 0xFF	; 255
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	8f 4f       	sbci	r24, 0xFF	; 255
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	16 c0       	rjmp	.+44     	; 0xef0 <__floatsisf+0x6c>
     ec4:	88 23       	and	r24, r24
     ec6:	11 f0       	breq	.+4      	; 0xecc <__floatsisf+0x48>
     ec8:	96 e9       	ldi	r25, 0x96	; 150
     eca:	11 c0       	rjmp	.+34     	; 0xeee <__floatsisf+0x6a>
     ecc:	77 23       	and	r23, r23
     ece:	21 f0       	breq	.+8      	; 0xed8 <__floatsisf+0x54>
     ed0:	9e e8       	ldi	r25, 0x8E	; 142
     ed2:	87 2f       	mov	r24, r23
     ed4:	76 2f       	mov	r23, r22
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <__floatsisf+0x5e>
     ed8:	66 23       	and	r22, r22
     eda:	71 f0       	breq	.+28     	; 0xef8 <__floatsisf+0x74>
     edc:	96 e8       	ldi	r25, 0x86	; 134
     ede:	86 2f       	mov	r24, r22
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	2a f0       	brmi	.+10     	; 0xef0 <__floatsisf+0x6c>
     ee6:	9a 95       	dec	r25
     ee8:	66 0f       	add	r22, r22
     eea:	77 1f       	adc	r23, r23
     eec:	88 1f       	adc	r24, r24
     eee:	da f7       	brpl	.-10     	; 0xee6 <__floatsisf+0x62>
     ef0:	88 0f       	add	r24, r24
     ef2:	96 95       	lsr	r25
     ef4:	87 95       	ror	r24
     ef6:	97 f9       	bld	r25, 7
     ef8:	08 95       	ret

00000efa <__fp_inf>:
     efa:	97 f9       	bld	r25, 7
     efc:	9f 67       	ori	r25, 0x7F	; 127
     efe:	80 e8       	ldi	r24, 0x80	; 128
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	08 95       	ret

00000f06 <__fp_nan>:
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	80 ec       	ldi	r24, 0xC0	; 192
     f0a:	08 95       	ret

00000f0c <__fp_pscA>:
     f0c:	00 24       	eor	r0, r0
     f0e:	0a 94       	dec	r0
     f10:	16 16       	cp	r1, r22
     f12:	17 06       	cpc	r1, r23
     f14:	18 06       	cpc	r1, r24
     f16:	09 06       	cpc	r0, r25
     f18:	08 95       	ret

00000f1a <__fp_pscB>:
     f1a:	00 24       	eor	r0, r0
     f1c:	0a 94       	dec	r0
     f1e:	12 16       	cp	r1, r18
     f20:	13 06       	cpc	r1, r19
     f22:	14 06       	cpc	r1, r20
     f24:	05 06       	cpc	r0, r21
     f26:	08 95       	ret

00000f28 <__fp_round>:
     f28:	09 2e       	mov	r0, r25
     f2a:	03 94       	inc	r0
     f2c:	00 0c       	add	r0, r0
     f2e:	11 f4       	brne	.+4      	; 0xf34 <__fp_round+0xc>
     f30:	88 23       	and	r24, r24
     f32:	52 f0       	brmi	.+20     	; 0xf48 <__fp_round+0x20>
     f34:	bb 0f       	add	r27, r27
     f36:	40 f4       	brcc	.+16     	; 0xf48 <__fp_round+0x20>
     f38:	bf 2b       	or	r27, r31
     f3a:	11 f4       	brne	.+4      	; 0xf40 <__fp_round+0x18>
     f3c:	60 ff       	sbrs	r22, 0
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <__fp_round+0x20>
     f40:	6f 5f       	subi	r22, 0xFF	; 255
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	8f 4f       	sbci	r24, 0xFF	; 255
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	08 95       	ret

00000f4a <__fp_split3>:
     f4a:	57 fd       	sbrc	r21, 7
     f4c:	90 58       	subi	r25, 0x80	; 128
     f4e:	44 0f       	add	r20, r20
     f50:	55 1f       	adc	r21, r21
     f52:	59 f0       	breq	.+22     	; 0xf6a <__fp_splitA+0x10>
     f54:	5f 3f       	cpi	r21, 0xFF	; 255
     f56:	71 f0       	breq	.+28     	; 0xf74 <__fp_splitA+0x1a>
     f58:	47 95       	ror	r20

00000f5a <__fp_splitA>:
     f5a:	88 0f       	add	r24, r24
     f5c:	97 fb       	bst	r25, 7
     f5e:	99 1f       	adc	r25, r25
     f60:	61 f0       	breq	.+24     	; 0xf7a <__fp_splitA+0x20>
     f62:	9f 3f       	cpi	r25, 0xFF	; 255
     f64:	79 f0       	breq	.+30     	; 0xf84 <__fp_splitA+0x2a>
     f66:	87 95       	ror	r24
     f68:	08 95       	ret
     f6a:	12 16       	cp	r1, r18
     f6c:	13 06       	cpc	r1, r19
     f6e:	14 06       	cpc	r1, r20
     f70:	55 1f       	adc	r21, r21
     f72:	f2 cf       	rjmp	.-28     	; 0xf58 <__fp_split3+0xe>
     f74:	46 95       	lsr	r20
     f76:	f1 df       	rcall	.-30     	; 0xf5a <__fp_splitA>
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <__fp_splitA+0x30>
     f7a:	16 16       	cp	r1, r22
     f7c:	17 06       	cpc	r1, r23
     f7e:	18 06       	cpc	r1, r24
     f80:	99 1f       	adc	r25, r25
     f82:	f1 cf       	rjmp	.-30     	; 0xf66 <__fp_splitA+0xc>
     f84:	86 95       	lsr	r24
     f86:	71 05       	cpc	r23, r1
     f88:	61 05       	cpc	r22, r1
     f8a:	08 94       	sec
     f8c:	08 95       	ret

00000f8e <__fp_zero>:
     f8e:	e8 94       	clt

00000f90 <__fp_szero>:
     f90:	bb 27       	eor	r27, r27
     f92:	66 27       	eor	r22, r22
     f94:	77 27       	eor	r23, r23
     f96:	cb 01       	movw	r24, r22
     f98:	97 f9       	bld	r25, 7
     f9a:	08 95       	ret

00000f9c <__mulsf3>:
     f9c:	0b d0       	rcall	.+22     	; 0xfb4 <__mulsf3x>
     f9e:	c4 cf       	rjmp	.-120    	; 0xf28 <__fp_round>
     fa0:	b5 df       	rcall	.-150    	; 0xf0c <__fp_pscA>
     fa2:	28 f0       	brcs	.+10     	; 0xfae <__mulsf3+0x12>
     fa4:	ba df       	rcall	.-140    	; 0xf1a <__fp_pscB>
     fa6:	18 f0       	brcs	.+6      	; 0xfae <__mulsf3+0x12>
     fa8:	95 23       	and	r25, r21
     faa:	09 f0       	breq	.+2      	; 0xfae <__mulsf3+0x12>
     fac:	a6 cf       	rjmp	.-180    	; 0xefa <__fp_inf>
     fae:	ab cf       	rjmp	.-170    	; 0xf06 <__fp_nan>
     fb0:	11 24       	eor	r1, r1
     fb2:	ee cf       	rjmp	.-36     	; 0xf90 <__fp_szero>

00000fb4 <__mulsf3x>:
     fb4:	ca df       	rcall	.-108    	; 0xf4a <__fp_split3>
     fb6:	a0 f3       	brcs	.-24     	; 0xfa0 <__mulsf3+0x4>

00000fb8 <__mulsf3_pse>:
     fb8:	95 9f       	mul	r25, r21
     fba:	d1 f3       	breq	.-12     	; 0xfb0 <__mulsf3+0x14>
     fbc:	95 0f       	add	r25, r21
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	55 1f       	adc	r21, r21
     fc2:	62 9f       	mul	r22, r18
     fc4:	f0 01       	movw	r30, r0
     fc6:	72 9f       	mul	r23, r18
     fc8:	bb 27       	eor	r27, r27
     fca:	f0 0d       	add	r31, r0
     fcc:	b1 1d       	adc	r27, r1
     fce:	63 9f       	mul	r22, r19
     fd0:	aa 27       	eor	r26, r26
     fd2:	f0 0d       	add	r31, r0
     fd4:	b1 1d       	adc	r27, r1
     fd6:	aa 1f       	adc	r26, r26
     fd8:	64 9f       	mul	r22, r20
     fda:	66 27       	eor	r22, r22
     fdc:	b0 0d       	add	r27, r0
     fde:	a1 1d       	adc	r26, r1
     fe0:	66 1f       	adc	r22, r22
     fe2:	82 9f       	mul	r24, r18
     fe4:	22 27       	eor	r18, r18
     fe6:	b0 0d       	add	r27, r0
     fe8:	a1 1d       	adc	r26, r1
     fea:	62 1f       	adc	r22, r18
     fec:	73 9f       	mul	r23, r19
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	62 1f       	adc	r22, r18
     ff4:	83 9f       	mul	r24, r19
     ff6:	a0 0d       	add	r26, r0
     ff8:	61 1d       	adc	r22, r1
     ffa:	22 1f       	adc	r18, r18
     ffc:	74 9f       	mul	r23, r20
     ffe:	33 27       	eor	r19, r19
    1000:	a0 0d       	add	r26, r0
    1002:	61 1d       	adc	r22, r1
    1004:	23 1f       	adc	r18, r19
    1006:	84 9f       	mul	r24, r20
    1008:	60 0d       	add	r22, r0
    100a:	21 1d       	adc	r18, r1
    100c:	82 2f       	mov	r24, r18
    100e:	76 2f       	mov	r23, r22
    1010:	6a 2f       	mov	r22, r26
    1012:	11 24       	eor	r1, r1
    1014:	9f 57       	subi	r25, 0x7F	; 127
    1016:	50 40       	sbci	r21, 0x00	; 0
    1018:	8a f0       	brmi	.+34     	; 0x103c <__mulsf3_pse+0x84>
    101a:	e1 f0       	breq	.+56     	; 0x1054 <__mulsf3_pse+0x9c>
    101c:	88 23       	and	r24, r24
    101e:	4a f0       	brmi	.+18     	; 0x1032 <__mulsf3_pse+0x7a>
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	bb 1f       	adc	r27, r27
    1026:	66 1f       	adc	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	50 40       	sbci	r21, 0x00	; 0
    1030:	a9 f7       	brne	.-22     	; 0x101c <__mulsf3_pse+0x64>
    1032:	9e 3f       	cpi	r25, 0xFE	; 254
    1034:	51 05       	cpc	r21, r1
    1036:	70 f0       	brcs	.+28     	; 0x1054 <__mulsf3_pse+0x9c>
    1038:	60 cf       	rjmp	.-320    	; 0xefa <__fp_inf>
    103a:	aa cf       	rjmp	.-172    	; 0xf90 <__fp_szero>
    103c:	5f 3f       	cpi	r21, 0xFF	; 255
    103e:	ec f3       	brlt	.-6      	; 0x103a <__mulsf3_pse+0x82>
    1040:	98 3e       	cpi	r25, 0xE8	; 232
    1042:	dc f3       	brlt	.-10     	; 0x103a <__mulsf3_pse+0x82>
    1044:	86 95       	lsr	r24
    1046:	77 95       	ror	r23
    1048:	67 95       	ror	r22
    104a:	b7 95       	ror	r27
    104c:	f7 95       	ror	r31
    104e:	e7 95       	ror	r30
    1050:	9f 5f       	subi	r25, 0xFF	; 255
    1052:	c1 f7       	brne	.-16     	; 0x1044 <__mulsf3_pse+0x8c>
    1054:	fe 2b       	or	r31, r30
    1056:	88 0f       	add	r24, r24
    1058:	91 1d       	adc	r25, r1
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__udivmodhi4>:
    1062:	aa 1b       	sub	r26, r26
    1064:	bb 1b       	sub	r27, r27
    1066:	51 e1       	ldi	r21, 0x11	; 17
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <__udivmodhi4_ep>

0000106a <__udivmodhi4_loop>:
    106a:	aa 1f       	adc	r26, r26
    106c:	bb 1f       	adc	r27, r27
    106e:	a6 17       	cp	r26, r22
    1070:	b7 07       	cpc	r27, r23
    1072:	10 f0       	brcs	.+4      	; 0x1078 <__udivmodhi4_ep>
    1074:	a6 1b       	sub	r26, r22
    1076:	b7 0b       	sbc	r27, r23

00001078 <__udivmodhi4_ep>:
    1078:	88 1f       	adc	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	5a 95       	dec	r21
    107e:	a9 f7       	brne	.-22     	; 0x106a <__udivmodhi4_loop>
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	08 95       	ret

0000108a <__divmodhi4>:
    108a:	97 fb       	bst	r25, 7
    108c:	09 2e       	mov	r0, r25
    108e:	07 26       	eor	r0, r23
    1090:	0a d0       	rcall	.+20     	; 0x10a6 <__divmodhi4_neg1>
    1092:	77 fd       	sbrc	r23, 7
    1094:	04 d0       	rcall	.+8      	; 0x109e <__divmodhi4_neg2>
    1096:	e5 df       	rcall	.-54     	; 0x1062 <__udivmodhi4>
    1098:	06 d0       	rcall	.+12     	; 0x10a6 <__divmodhi4_neg1>
    109a:	00 20       	and	r0, r0
    109c:	1a f4       	brpl	.+6      	; 0x10a4 <__divmodhi4_exit>

0000109e <__divmodhi4_neg2>:
    109e:	70 95       	com	r23
    10a0:	61 95       	neg	r22
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255

000010a4 <__divmodhi4_exit>:
    10a4:	08 95       	ret

000010a6 <__divmodhi4_neg1>:
    10a6:	f6 f7       	brtc	.-4      	; 0x10a4 <__divmodhi4_exit>
    10a8:	90 95       	com	r25
    10aa:	81 95       	neg	r24
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	08 95       	ret

000010b0 <malloc>:
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	ac 01       	movw	r20, r24
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	91 05       	cpc	r25, r1
    10ba:	10 f4       	brcc	.+4      	; 0x10c0 <malloc+0x10>
    10bc:	42 e0       	ldi	r20, 0x02	; 2
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	e0 91 48 03 	lds	r30, 0x0348
    10c4:	f0 91 49 03 	lds	r31, 0x0349
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	24 c0       	rjmp	.+72     	; 0x111a <malloc+0x6a>
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	84 17       	cp	r24, r20
    10d8:	95 07       	cpc	r25, r21
    10da:	d0 f0       	brcs	.+52     	; 0x1110 <malloc+0x60>
    10dc:	84 17       	cp	r24, r20
    10de:	95 07       	cpc	r25, r21
    10e0:	71 f4       	brne	.+28     	; 0x10fe <malloc+0x4e>
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	10 97       	sbiw	r26, 0x00	; 0
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <malloc+0x44>
    10ea:	13 96       	adiw	r26, 0x03	; 3
    10ec:	9c 93       	st	X, r25
    10ee:	8e 93       	st	-X, r24
    10f0:	12 97       	sbiw	r26, 0x02	; 2
    10f2:	2c c0       	rjmp	.+88     	; 0x114c <malloc+0x9c>
    10f4:	90 93 49 03 	sts	0x0349, r25
    10f8:	80 93 48 03 	sts	0x0348, r24
    10fc:	27 c0       	rjmp	.+78     	; 0x114c <malloc+0x9c>
    10fe:	21 15       	cp	r18, r1
    1100:	31 05       	cpc	r19, r1
    1102:	19 f0       	breq	.+6      	; 0x110a <malloc+0x5a>
    1104:	82 17       	cp	r24, r18
    1106:	93 07       	cpc	r25, r19
    1108:	18 f4       	brcc	.+6      	; 0x1110 <malloc+0x60>
    110a:	9c 01       	movw	r18, r24
    110c:	bd 01       	movw	r22, r26
    110e:	ef 01       	movw	r28, r30
    1110:	92 81       	ldd	r25, Z+2	; 0x02
    1112:	83 81       	ldd	r24, Z+3	; 0x03
    1114:	df 01       	movw	r26, r30
    1116:	e9 2f       	mov	r30, r25
    1118:	f8 2f       	mov	r31, r24
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	d1 f6       	brne	.-76     	; 0x10d2 <malloc+0x22>
    111e:	21 15       	cp	r18, r1
    1120:	31 05       	cpc	r19, r1
    1122:	f9 f0       	breq	.+62     	; 0x1162 <malloc+0xb2>
    1124:	c9 01       	movw	r24, r18
    1126:	84 1b       	sub	r24, r20
    1128:	95 0b       	sbc	r25, r21
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	91 05       	cpc	r25, r1
    112e:	80 f4       	brcc	.+32     	; 0x1150 <malloc+0xa0>
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	9b 81       	ldd	r25, Y+3	; 0x03
    1134:	61 15       	cp	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	21 f0       	breq	.+8      	; 0x1142 <malloc+0x92>
    113a:	fb 01       	movw	r30, r22
    113c:	93 83       	std	Z+3, r25	; 0x03
    113e:	82 83       	std	Z+2, r24	; 0x02
    1140:	04 c0       	rjmp	.+8      	; 0x114a <malloc+0x9a>
    1142:	90 93 49 03 	sts	0x0349, r25
    1146:	80 93 48 03 	sts	0x0348, r24
    114a:	fe 01       	movw	r30, r28
    114c:	32 96       	adiw	r30, 0x02	; 2
    114e:	42 c0       	rjmp	.+132    	; 0x11d4 <malloc+0x124>
    1150:	fe 01       	movw	r30, r28
    1152:	e8 0f       	add	r30, r24
    1154:	f9 1f       	adc	r31, r25
    1156:	41 93       	st	Z+, r20
    1158:	51 93       	st	Z+, r21
    115a:	02 97       	sbiw	r24, 0x02	; 2
    115c:	99 83       	std	Y+1, r25	; 0x01
    115e:	88 83       	st	Y, r24
    1160:	39 c0       	rjmp	.+114    	; 0x11d4 <malloc+0x124>
    1162:	80 91 46 03 	lds	r24, 0x0346
    1166:	90 91 47 03 	lds	r25, 0x0347
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	41 f4       	brne	.+16     	; 0x117e <malloc+0xce>
    116e:	80 91 2a 01 	lds	r24, 0x012A
    1172:	90 91 2b 01 	lds	r25, 0x012B
    1176:	90 93 47 03 	sts	0x0347, r25
    117a:	80 93 46 03 	sts	0x0346, r24
    117e:	20 91 28 01 	lds	r18, 0x0128
    1182:	30 91 29 01 	lds	r19, 0x0129
    1186:	21 15       	cp	r18, r1
    1188:	31 05       	cpc	r19, r1
    118a:	41 f4       	brne	.+16     	; 0x119c <malloc+0xec>
    118c:	2d b7       	in	r18, 0x3d	; 61
    118e:	3e b7       	in	r19, 0x3e	; 62
    1190:	80 91 2c 01 	lds	r24, 0x012C
    1194:	90 91 2d 01 	lds	r25, 0x012D
    1198:	28 1b       	sub	r18, r24
    119a:	39 0b       	sbc	r19, r25
    119c:	e0 91 46 03 	lds	r30, 0x0346
    11a0:	f0 91 47 03 	lds	r31, 0x0347
    11a4:	e2 17       	cp	r30, r18
    11a6:	f3 07       	cpc	r31, r19
    11a8:	98 f4       	brcc	.+38     	; 0x11d0 <malloc+0x120>
    11aa:	2e 1b       	sub	r18, r30
    11ac:	3f 0b       	sbc	r19, r31
    11ae:	24 17       	cp	r18, r20
    11b0:	35 07       	cpc	r19, r21
    11b2:	70 f0       	brcs	.+28     	; 0x11d0 <malloc+0x120>
    11b4:	ca 01       	movw	r24, r20
    11b6:	02 96       	adiw	r24, 0x02	; 2
    11b8:	28 17       	cp	r18, r24
    11ba:	39 07       	cpc	r19, r25
    11bc:	48 f0       	brcs	.+18     	; 0x11d0 <malloc+0x120>
    11be:	8e 0f       	add	r24, r30
    11c0:	9f 1f       	adc	r25, r31
    11c2:	90 93 47 03 	sts	0x0347, r25
    11c6:	80 93 46 03 	sts	0x0346, r24
    11ca:	41 93       	st	Z+, r20
    11cc:	51 93       	st	Z+, r21
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <malloc+0x124>
    11d0:	e0 e0       	ldi	r30, 0x00	; 0
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	cf 01       	movw	r24, r30
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <free>:
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	9c 01       	movw	r18, r24
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	09 f4       	brne	.+2      	; 0x11ec <free+0x10>
    11ea:	8c c0       	rjmp	.+280    	; 0x1304 <free+0x128>
    11ec:	dc 01       	movw	r26, r24
    11ee:	12 97       	sbiw	r26, 0x02	; 2
    11f0:	13 96       	adiw	r26, 0x03	; 3
    11f2:	1c 92       	st	X, r1
    11f4:	1e 92       	st	-X, r1
    11f6:	12 97       	sbiw	r26, 0x02	; 2
    11f8:	60 91 48 03 	lds	r22, 0x0348
    11fc:	70 91 49 03 	lds	r23, 0x0349
    1200:	61 15       	cp	r22, r1
    1202:	71 05       	cpc	r23, r1
    1204:	89 f4       	brne	.+34     	; 0x1228 <free+0x4c>
    1206:	8d 91       	ld	r24, X+
    1208:	9c 91       	ld	r25, X
    120a:	11 97       	sbiw	r26, 0x01	; 1
    120c:	82 0f       	add	r24, r18
    120e:	93 1f       	adc	r25, r19
    1210:	20 91 46 03 	lds	r18, 0x0346
    1214:	30 91 47 03 	lds	r19, 0x0347
    1218:	28 17       	cp	r18, r24
    121a:	39 07       	cpc	r19, r25
    121c:	69 f5       	brne	.+90     	; 0x1278 <free+0x9c>
    121e:	b0 93 47 03 	sts	0x0347, r27
    1222:	a0 93 46 03 	sts	0x0346, r26
    1226:	6e c0       	rjmp	.+220    	; 0x1304 <free+0x128>
    1228:	fb 01       	movw	r30, r22
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <free+0x56>
    1230:	fc 01       	movw	r30, r24
    1232:	ea 17       	cp	r30, r26
    1234:	fb 07       	cpc	r31, r27
    1236:	30 f4       	brcc	.+12     	; 0x1244 <free+0x68>
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	af 01       	movw	r20, r30
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	b9 f7       	brne	.-18     	; 0x1230 <free+0x54>
    1242:	1f c0       	rjmp	.+62     	; 0x1282 <free+0xa6>
    1244:	e9 01       	movw	r28, r18
    1246:	22 97       	sbiw	r28, 0x02	; 2
    1248:	fb 83       	std	Y+3, r31	; 0x03
    124a:	ea 83       	std	Y+2, r30	; 0x02
    124c:	08 81       	ld	r16, Y
    124e:	19 81       	ldd	r17, Y+1	; 0x01
    1250:	c9 01       	movw	r24, r18
    1252:	80 0f       	add	r24, r16
    1254:	91 1f       	adc	r25, r17
    1256:	8e 17       	cp	r24, r30
    1258:	9f 07       	cpc	r25, r31
    125a:	59 f4       	brne	.+22     	; 0x1272 <free+0x96>
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	80 0f       	add	r24, r16
    1262:	91 1f       	adc	r25, r17
    1264:	02 96       	adiw	r24, 0x02	; 2
    1266:	99 83       	std	Y+1, r25	; 0x01
    1268:	88 83       	st	Y, r24
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	9b 83       	std	Y+3, r25	; 0x03
    1270:	8a 83       	std	Y+2, r24	; 0x02
    1272:	41 15       	cp	r20, r1
    1274:	51 05       	cpc	r21, r1
    1276:	29 f4       	brne	.+10     	; 0x1282 <free+0xa6>
    1278:	b0 93 49 03 	sts	0x0349, r27
    127c:	a0 93 48 03 	sts	0x0348, r26
    1280:	41 c0       	rjmp	.+130    	; 0x1304 <free+0x128>
    1282:	fa 01       	movw	r30, r20
    1284:	b3 83       	std	Z+3, r27	; 0x03
    1286:	a2 83       	std	Z+2, r26	; 0x02
    1288:	c1 91       	ld	r28, Z+
    128a:	d1 91       	ld	r29, Z+
    128c:	ec 0f       	add	r30, r28
    128e:	fd 1f       	adc	r31, r29
    1290:	ae 17       	cp	r26, r30
    1292:	bf 07       	cpc	r27, r31
    1294:	81 f4       	brne	.+32     	; 0x12b6 <free+0xda>
    1296:	f9 01       	movw	r30, r18
    1298:	92 91       	ld	r25, -Z
    129a:	82 91       	ld	r24, -Z
    129c:	8c 0f       	add	r24, r28
    129e:	9d 1f       	adc	r25, r29
    12a0:	02 96       	adiw	r24, 0x02	; 2
    12a2:	da 01       	movw	r26, r20
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	9c 93       	st	X, r25
    12a8:	8e 93       	st	-X, r24
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	13 96       	adiw	r26, 0x03	; 3
    12b0:	9c 93       	st	X, r25
    12b2:	8e 93       	st	-X, r24
    12b4:	12 97       	sbiw	r26, 0x02	; 2
    12b6:	e0 e0       	ldi	r30, 0x00	; 0
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <free+0xe4>
    12bc:	fb 01       	movw	r30, r22
    12be:	bc 01       	movw	r22, r24
    12c0:	db 01       	movw	r26, r22
    12c2:	12 96       	adiw	r26, 0x02	; 2
    12c4:	8d 91       	ld	r24, X+
    12c6:	9c 91       	ld	r25, X
    12c8:	13 97       	sbiw	r26, 0x03	; 3
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	b9 f7       	brne	.-18     	; 0x12bc <free+0xe0>
    12ce:	cb 01       	movw	r24, r22
    12d0:	02 96       	adiw	r24, 0x02	; 2
    12d2:	2d 91       	ld	r18, X+
    12d4:	3c 91       	ld	r19, X
    12d6:	11 97       	sbiw	r26, 0x01	; 1
    12d8:	82 0f       	add	r24, r18
    12da:	93 1f       	adc	r25, r19
    12dc:	20 91 46 03 	lds	r18, 0x0346
    12e0:	30 91 47 03 	lds	r19, 0x0347
    12e4:	28 17       	cp	r18, r24
    12e6:	39 07       	cpc	r19, r25
    12e8:	69 f4       	brne	.+26     	; 0x1304 <free+0x128>
    12ea:	30 97       	sbiw	r30, 0x00	; 0
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <free+0x11c>
    12ee:	10 92 49 03 	sts	0x0349, r1
    12f2:	10 92 48 03 	sts	0x0348, r1
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <free+0x120>
    12f8:	13 82       	std	Z+3, r1	; 0x03
    12fa:	12 82       	std	Z+2, r1	; 0x02
    12fc:	70 93 47 03 	sts	0x0347, r23
    1300:	60 93 46 03 	sts	0x0346, r22
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <strcat>:
    130e:	fb 01       	movw	r30, r22
    1310:	dc 01       	movw	r26, r24
    1312:	0d 90       	ld	r0, X+
    1314:	00 20       	and	r0, r0
    1316:	e9 f7       	brne	.-6      	; 0x1312 <strcat+0x4>
    1318:	11 97       	sbiw	r26, 0x01	; 1
    131a:	01 90       	ld	r0, Z+
    131c:	0d 92       	st	X+, r0
    131e:	00 20       	and	r0, r0
    1320:	e1 f7       	brne	.-8      	; 0x131a <strcat+0xc>
    1322:	08 95       	ret

00001324 <strcmp>:
    1324:	fb 01       	movw	r30, r22
    1326:	dc 01       	movw	r26, r24
    1328:	8d 91       	ld	r24, X+
    132a:	01 90       	ld	r0, Z+
    132c:	80 19       	sub	r24, r0
    132e:	01 10       	cpse	r0, r1
    1330:	d9 f3       	breq	.-10     	; 0x1328 <strcmp+0x4>
    1332:	99 0b       	sbc	r25, r25
    1334:	08 95       	ret

00001336 <strcpy>:
    1336:	fb 01       	movw	r30, r22
    1338:	dc 01       	movw	r26, r24
    133a:	01 90       	ld	r0, Z+
    133c:	0d 92       	st	X+, r0
    133e:	00 20       	and	r0, r0
    1340:	e1 f7       	brne	.-8      	; 0x133a <strcpy+0x4>
    1342:	08 95       	ret

00001344 <sprintf>:
    1344:	ae e0       	ldi	r26, 0x0E	; 14
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 ea       	ldi	r30, 0xA8	; 168
    134a:	f9 e0       	ldi	r31, 0x09	; 9
    134c:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__prologue_saves__+0x1c>
    1350:	0d 89       	ldd	r16, Y+21	; 0x15
    1352:	1e 89       	ldd	r17, Y+22	; 0x16
    1354:	86 e0       	ldi	r24, 0x06	; 6
    1356:	8c 83       	std	Y+4, r24	; 0x04
    1358:	1a 83       	std	Y+2, r17	; 0x02
    135a:	09 83       	std	Y+1, r16	; 0x01
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	9f e7       	ldi	r25, 0x7F	; 127
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	ae 01       	movw	r20, r28
    1366:	47 5e       	subi	r20, 0xE7	; 231
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	ce 01       	movw	r24, r28
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	6f 89       	ldd	r22, Y+23	; 0x17
    1370:	78 8d       	ldd	r23, Y+24	; 0x18
    1372:	0e 94 c4 09 	call	0x1388	; 0x1388 <vfprintf>
    1376:	ef 81       	ldd	r30, Y+7	; 0x07
    1378:	f8 85       	ldd	r31, Y+8	; 0x08
    137a:	e0 0f       	add	r30, r16
    137c:	f1 1f       	adc	r31, r17
    137e:	10 82       	st	Z, r1
    1380:	2e 96       	adiw	r28, 0x0e	; 14
    1382:	e4 e0       	ldi	r30, 0x04	; 4
    1384:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__epilogue_restores__+0x1c>

00001388 <vfprintf>:
    1388:	ad e0       	ldi	r26, 0x0D	; 13
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea ec       	ldi	r30, 0xCA	; 202
    138e:	f9 e0       	ldi	r31, 0x09	; 9
    1390:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__prologue_saves__>
    1394:	3c 01       	movw	r6, r24
    1396:	7d 87       	std	Y+13, r23	; 0x0d
    1398:	6c 87       	std	Y+12, r22	; 0x0c
    139a:	5a 01       	movw	r10, r20
    139c:	fc 01       	movw	r30, r24
    139e:	17 82       	std	Z+7, r1	; 0x07
    13a0:	16 82       	std	Z+6, r1	; 0x06
    13a2:	83 81       	ldd	r24, Z+3	; 0x03
    13a4:	81 ff       	sbrs	r24, 1
    13a6:	c8 c1       	rjmp	.+912    	; 0x1738 <vfprintf+0x3b0>
    13a8:	2e 01       	movw	r4, r28
    13aa:	08 94       	sec
    13ac:	41 1c       	adc	r4, r1
    13ae:	51 1c       	adc	r5, r1
    13b0:	f3 01       	movw	r30, r6
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	ec 85       	ldd	r30, Y+12	; 0x0c
    13b6:	fd 85       	ldd	r31, Y+13	; 0x0d
    13b8:	93 fd       	sbrc	r25, 3
    13ba:	85 91       	lpm	r24, Z+
    13bc:	93 ff       	sbrs	r25, 3
    13be:	81 91       	ld	r24, Z+
    13c0:	fd 87       	std	Y+13, r31	; 0x0d
    13c2:	ec 87       	std	Y+12, r30	; 0x0c
    13c4:	88 23       	and	r24, r24
    13c6:	09 f4       	brne	.+2      	; 0x13ca <vfprintf+0x42>
    13c8:	b3 c1       	rjmp	.+870    	; 0x1730 <vfprintf+0x3a8>
    13ca:	85 32       	cpi	r24, 0x25	; 37
    13cc:	41 f4       	brne	.+16     	; 0x13de <vfprintf+0x56>
    13ce:	93 fd       	sbrc	r25, 3
    13d0:	85 91       	lpm	r24, Z+
    13d2:	93 ff       	sbrs	r25, 3
    13d4:	81 91       	ld	r24, Z+
    13d6:	fd 87       	std	Y+13, r31	; 0x0d
    13d8:	ec 87       	std	Y+12, r30	; 0x0c
    13da:	85 32       	cpi	r24, 0x25	; 37
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <vfprintf+0x60>
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	b3 01       	movw	r22, r6
    13e2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    13e6:	e4 cf       	rjmp	.-56     	; 0x13b0 <vfprintf+0x28>
    13e8:	ff 24       	eor	r15, r15
    13ea:	ee 24       	eor	r14, r14
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	10 32       	cpi	r17, 0x20	; 32
    13f0:	b0 f4       	brcc	.+44     	; 0x141e <vfprintf+0x96>
    13f2:	8b 32       	cpi	r24, 0x2B	; 43
    13f4:	69 f0       	breq	.+26     	; 0x1410 <vfprintf+0x88>
    13f6:	8c 32       	cpi	r24, 0x2C	; 44
    13f8:	28 f4       	brcc	.+10     	; 0x1404 <vfprintf+0x7c>
    13fa:	80 32       	cpi	r24, 0x20	; 32
    13fc:	51 f0       	breq	.+20     	; 0x1412 <vfprintf+0x8a>
    13fe:	83 32       	cpi	r24, 0x23	; 35
    1400:	71 f4       	brne	.+28     	; 0x141e <vfprintf+0x96>
    1402:	0b c0       	rjmp	.+22     	; 0x141a <vfprintf+0x92>
    1404:	8d 32       	cpi	r24, 0x2D	; 45
    1406:	39 f0       	breq	.+14     	; 0x1416 <vfprintf+0x8e>
    1408:	80 33       	cpi	r24, 0x30	; 48
    140a:	49 f4       	brne	.+18     	; 0x141e <vfprintf+0x96>
    140c:	11 60       	ori	r17, 0x01	; 1
    140e:	2c c0       	rjmp	.+88     	; 0x1468 <vfprintf+0xe0>
    1410:	12 60       	ori	r17, 0x02	; 2
    1412:	14 60       	ori	r17, 0x04	; 4
    1414:	29 c0       	rjmp	.+82     	; 0x1468 <vfprintf+0xe0>
    1416:	18 60       	ori	r17, 0x08	; 8
    1418:	27 c0       	rjmp	.+78     	; 0x1468 <vfprintf+0xe0>
    141a:	10 61       	ori	r17, 0x10	; 16
    141c:	25 c0       	rjmp	.+74     	; 0x1468 <vfprintf+0xe0>
    141e:	17 fd       	sbrc	r17, 7
    1420:	2e c0       	rjmp	.+92     	; 0x147e <vfprintf+0xf6>
    1422:	28 2f       	mov	r18, r24
    1424:	20 53       	subi	r18, 0x30	; 48
    1426:	2a 30       	cpi	r18, 0x0A	; 10
    1428:	98 f4       	brcc	.+38     	; 0x1450 <vfprintf+0xc8>
    142a:	16 ff       	sbrs	r17, 6
    142c:	08 c0       	rjmp	.+16     	; 0x143e <vfprintf+0xb6>
    142e:	8f 2d       	mov	r24, r15
    1430:	88 0f       	add	r24, r24
    1432:	f8 2e       	mov	r15, r24
    1434:	ff 0c       	add	r15, r15
    1436:	ff 0c       	add	r15, r15
    1438:	f8 0e       	add	r15, r24
    143a:	f2 0e       	add	r15, r18
    143c:	15 c0       	rjmp	.+42     	; 0x1468 <vfprintf+0xe0>
    143e:	8e 2d       	mov	r24, r14
    1440:	88 0f       	add	r24, r24
    1442:	e8 2e       	mov	r14, r24
    1444:	ee 0c       	add	r14, r14
    1446:	ee 0c       	add	r14, r14
    1448:	e8 0e       	add	r14, r24
    144a:	e2 0e       	add	r14, r18
    144c:	10 62       	ori	r17, 0x20	; 32
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <vfprintf+0xe0>
    1450:	8e 32       	cpi	r24, 0x2E	; 46
    1452:	21 f4       	brne	.+8      	; 0x145c <vfprintf+0xd4>
    1454:	16 fd       	sbrc	r17, 6
    1456:	6c c1       	rjmp	.+728    	; 0x1730 <vfprintf+0x3a8>
    1458:	10 64       	ori	r17, 0x40	; 64
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0xe0>
    145c:	8c 36       	cpi	r24, 0x6C	; 108
    145e:	11 f4       	brne	.+4      	; 0x1464 <vfprintf+0xdc>
    1460:	10 68       	ori	r17, 0x80	; 128
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <vfprintf+0xe0>
    1464:	88 36       	cpi	r24, 0x68	; 104
    1466:	59 f4       	brne	.+22     	; 0x147e <vfprintf+0xf6>
    1468:	ec 85       	ldd	r30, Y+12	; 0x0c
    146a:	fd 85       	ldd	r31, Y+13	; 0x0d
    146c:	93 fd       	sbrc	r25, 3
    146e:	85 91       	lpm	r24, Z+
    1470:	93 ff       	sbrs	r25, 3
    1472:	81 91       	ld	r24, Z+
    1474:	fd 87       	std	Y+13, r31	; 0x0d
    1476:	ec 87       	std	Y+12, r30	; 0x0c
    1478:	88 23       	and	r24, r24
    147a:	09 f0       	breq	.+2      	; 0x147e <vfprintf+0xf6>
    147c:	b8 cf       	rjmp	.-144    	; 0x13ee <vfprintf+0x66>
    147e:	98 2f       	mov	r25, r24
    1480:	95 54       	subi	r25, 0x45	; 69
    1482:	93 30       	cpi	r25, 0x03	; 3
    1484:	18 f0       	brcs	.+6      	; 0x148c <vfprintf+0x104>
    1486:	90 52       	subi	r25, 0x20	; 32
    1488:	93 30       	cpi	r25, 0x03	; 3
    148a:	38 f4       	brcc	.+14     	; 0x149a <vfprintf+0x112>
    148c:	24 e0       	ldi	r18, 0x04	; 4
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	a2 0e       	add	r10, r18
    1492:	b3 1e       	adc	r11, r19
    1494:	3f e3       	ldi	r19, 0x3F	; 63
    1496:	39 83       	std	Y+1, r19	; 0x01
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <vfprintf+0x130>
    149a:	83 36       	cpi	r24, 0x63	; 99
    149c:	31 f0       	breq	.+12     	; 0x14aa <vfprintf+0x122>
    149e:	83 37       	cpi	r24, 0x73	; 115
    14a0:	81 f0       	breq	.+32     	; 0x14c2 <vfprintf+0x13a>
    14a2:	83 35       	cpi	r24, 0x53	; 83
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <vfprintf+0x120>
    14a6:	5a c0       	rjmp	.+180    	; 0x155c <vfprintf+0x1d4>
    14a8:	22 c0       	rjmp	.+68     	; 0x14ee <vfprintf+0x166>
    14aa:	f5 01       	movw	r30, r10
    14ac:	80 81       	ld	r24, Z
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	22 e0       	ldi	r18, 0x02	; 2
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	a2 0e       	add	r10, r18
    14b6:	b3 1e       	adc	r11, r19
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	c2 2e       	mov	r12, r18
    14bc:	d1 2c       	mov	r13, r1
    14be:	42 01       	movw	r8, r4
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <vfprintf+0x162>
    14c2:	92 e0       	ldi	r25, 0x02	; 2
    14c4:	29 2e       	mov	r2, r25
    14c6:	31 2c       	mov	r3, r1
    14c8:	2a 0c       	add	r2, r10
    14ca:	3b 1c       	adc	r3, r11
    14cc:	f5 01       	movw	r30, r10
    14ce:	80 80       	ld	r8, Z
    14d0:	91 80       	ldd	r9, Z+1	; 0x01
    14d2:	16 ff       	sbrs	r17, 6
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <vfprintf+0x154>
    14d6:	6f 2d       	mov	r22, r15
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <vfprintf+0x158>
    14dc:	6f ef       	ldi	r22, 0xFF	; 255
    14de:	7f ef       	ldi	r23, 0xFF	; 255
    14e0:	c4 01       	movw	r24, r8
    14e2:	0e 94 ad 0b 	call	0x175a	; 0x175a <strnlen>
    14e6:	6c 01       	movw	r12, r24
    14e8:	51 01       	movw	r10, r2
    14ea:	1f 77       	andi	r17, 0x7F	; 127
    14ec:	15 c0       	rjmp	.+42     	; 0x1518 <vfprintf+0x190>
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	28 2e       	mov	r2, r24
    14f2:	31 2c       	mov	r3, r1
    14f4:	2a 0c       	add	r2, r10
    14f6:	3b 1c       	adc	r3, r11
    14f8:	f5 01       	movw	r30, r10
    14fa:	80 80       	ld	r8, Z
    14fc:	91 80       	ldd	r9, Z+1	; 0x01
    14fe:	16 ff       	sbrs	r17, 6
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <vfprintf+0x180>
    1502:	6f 2d       	mov	r22, r15
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <vfprintf+0x184>
    1508:	6f ef       	ldi	r22, 0xFF	; 255
    150a:	7f ef       	ldi	r23, 0xFF	; 255
    150c:	c4 01       	movw	r24, r8
    150e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <strnlen_P>
    1512:	6c 01       	movw	r12, r24
    1514:	10 68       	ori	r17, 0x80	; 128
    1516:	51 01       	movw	r10, r2
    1518:	13 fd       	sbrc	r17, 3
    151a:	1c c0       	rjmp	.+56     	; 0x1554 <vfprintf+0x1cc>
    151c:	06 c0       	rjmp	.+12     	; 0x152a <vfprintf+0x1a2>
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	b3 01       	movw	r22, r6
    1524:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    1528:	ea 94       	dec	r14
    152a:	8e 2d       	mov	r24, r14
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	c8 16       	cp	r12, r24
    1530:	d9 06       	cpc	r13, r25
    1532:	a8 f3       	brcs	.-22     	; 0x151e <vfprintf+0x196>
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <vfprintf+0x1cc>
    1536:	f4 01       	movw	r30, r8
    1538:	17 fd       	sbrc	r17, 7
    153a:	85 91       	lpm	r24, Z+
    153c:	17 ff       	sbrs	r17, 7
    153e:	81 91       	ld	r24, Z+
    1540:	4f 01       	movw	r8, r30
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	b3 01       	movw	r22, r6
    1546:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    154a:	e1 10       	cpse	r14, r1
    154c:	ea 94       	dec	r14
    154e:	08 94       	sec
    1550:	c1 08       	sbc	r12, r1
    1552:	d1 08       	sbc	r13, r1
    1554:	c1 14       	cp	r12, r1
    1556:	d1 04       	cpc	r13, r1
    1558:	71 f7       	brne	.-36     	; 0x1536 <vfprintf+0x1ae>
    155a:	e7 c0       	rjmp	.+462    	; 0x172a <vfprintf+0x3a2>
    155c:	84 36       	cpi	r24, 0x64	; 100
    155e:	11 f0       	breq	.+4      	; 0x1564 <vfprintf+0x1dc>
    1560:	89 36       	cpi	r24, 0x69	; 105
    1562:	51 f5       	brne	.+84     	; 0x15b8 <vfprintf+0x230>
    1564:	f5 01       	movw	r30, r10
    1566:	17 ff       	sbrs	r17, 7
    1568:	07 c0       	rjmp	.+14     	; 0x1578 <vfprintf+0x1f0>
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	a2 81       	ldd	r26, Z+2	; 0x02
    1570:	b3 81       	ldd	r27, Z+3	; 0x03
    1572:	24 e0       	ldi	r18, 0x04	; 4
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	08 c0       	rjmp	.+16     	; 0x1588 <vfprintf+0x200>
    1578:	80 81       	ld	r24, Z
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	aa 27       	eor	r26, r26
    157e:	97 fd       	sbrc	r25, 7
    1580:	a0 95       	com	r26
    1582:	ba 2f       	mov	r27, r26
    1584:	22 e0       	ldi	r18, 0x02	; 2
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	a2 0e       	add	r10, r18
    158a:	b3 1e       	adc	r11, r19
    158c:	01 2f       	mov	r16, r17
    158e:	0f 76       	andi	r16, 0x6F	; 111
    1590:	b7 ff       	sbrs	r27, 7
    1592:	08 c0       	rjmp	.+16     	; 0x15a4 <vfprintf+0x21c>
    1594:	b0 95       	com	r27
    1596:	a0 95       	com	r26
    1598:	90 95       	com	r25
    159a:	81 95       	neg	r24
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	af 4f       	sbci	r26, 0xFF	; 255
    15a0:	bf 4f       	sbci	r27, 0xFF	; 255
    15a2:	00 68       	ori	r16, 0x80	; 128
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	a2 01       	movw	r20, r4
    15aa:	2a e0       	ldi	r18, 0x0A	; 10
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__ultoa_invert>
    15b2:	d8 2e       	mov	r13, r24
    15b4:	d4 18       	sub	r13, r4
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <vfprintf+0x2ae>
    15b8:	85 37       	cpi	r24, 0x75	; 117
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <vfprintf+0x23c>
    15bc:	1f 7e       	andi	r17, 0xEF	; 239
    15be:	2a e0       	ldi	r18, 0x0A	; 10
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	20 c0       	rjmp	.+64     	; 0x1604 <vfprintf+0x27c>
    15c4:	19 7f       	andi	r17, 0xF9	; 249
    15c6:	8f 36       	cpi	r24, 0x6F	; 111
    15c8:	a9 f0       	breq	.+42     	; 0x15f4 <vfprintf+0x26c>
    15ca:	80 37       	cpi	r24, 0x70	; 112
    15cc:	20 f4       	brcc	.+8      	; 0x15d6 <vfprintf+0x24e>
    15ce:	88 35       	cpi	r24, 0x58	; 88
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <vfprintf+0x24c>
    15d2:	ae c0       	rjmp	.+348    	; 0x1730 <vfprintf+0x3a8>
    15d4:	0b c0       	rjmp	.+22     	; 0x15ec <vfprintf+0x264>
    15d6:	80 37       	cpi	r24, 0x70	; 112
    15d8:	21 f0       	breq	.+8      	; 0x15e2 <vfprintf+0x25a>
    15da:	88 37       	cpi	r24, 0x78	; 120
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <vfprintf+0x258>
    15de:	a8 c0       	rjmp	.+336    	; 0x1730 <vfprintf+0x3a8>
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <vfprintf+0x25c>
    15e2:	10 61       	ori	r17, 0x10	; 16
    15e4:	14 ff       	sbrs	r17, 4
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <vfprintf+0x272>
    15e8:	14 60       	ori	r17, 0x04	; 4
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <vfprintf+0x272>
    15ec:	14 ff       	sbrs	r17, 4
    15ee:	08 c0       	rjmp	.+16     	; 0x1600 <vfprintf+0x278>
    15f0:	16 60       	ori	r17, 0x06	; 6
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <vfprintf+0x278>
    15f4:	28 e0       	ldi	r18, 0x08	; 8
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <vfprintf+0x27c>
    15fa:	20 e1       	ldi	r18, 0x10	; 16
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0x27c>
    1600:	20 e1       	ldi	r18, 0x10	; 16
    1602:	32 e0       	ldi	r19, 0x02	; 2
    1604:	f5 01       	movw	r30, r10
    1606:	17 ff       	sbrs	r17, 7
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <vfprintf+0x290>
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	44 e0       	ldi	r20, 0x04	; 4
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <vfprintf+0x29c>
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	42 e0       	ldi	r20, 0x02	; 2
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	a4 0e       	add	r10, r20
    1626:	b5 1e       	adc	r11, r21
    1628:	a2 01       	movw	r20, r4
    162a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__ultoa_invert>
    162e:	d8 2e       	mov	r13, r24
    1630:	d4 18       	sub	r13, r4
    1632:	01 2f       	mov	r16, r17
    1634:	0f 77       	andi	r16, 0x7F	; 127
    1636:	06 ff       	sbrs	r16, 6
    1638:	09 c0       	rjmp	.+18     	; 0x164c <vfprintf+0x2c4>
    163a:	0e 7f       	andi	r16, 0xFE	; 254
    163c:	df 14       	cp	r13, r15
    163e:	30 f4       	brcc	.+12     	; 0x164c <vfprintf+0x2c4>
    1640:	04 ff       	sbrs	r16, 4
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <vfprintf+0x2c8>
    1644:	02 fd       	sbrc	r16, 2
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <vfprintf+0x2c8>
    1648:	0f 7e       	andi	r16, 0xEF	; 239
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <vfprintf+0x2c8>
    164c:	1d 2d       	mov	r17, r13
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <vfprintf+0x2ca>
    1650:	1f 2d       	mov	r17, r15
    1652:	80 2f       	mov	r24, r16
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	04 ff       	sbrs	r16, 4
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <vfprintf+0x2ea>
    165a:	fe 01       	movw	r30, r28
    165c:	ed 0d       	add	r30, r13
    165e:	f1 1d       	adc	r31, r1
    1660:	20 81       	ld	r18, Z
    1662:	20 33       	cpi	r18, 0x30	; 48
    1664:	11 f4       	brne	.+4      	; 0x166a <vfprintf+0x2e2>
    1666:	09 7e       	andi	r16, 0xE9	; 233
    1668:	09 c0       	rjmp	.+18     	; 0x167c <vfprintf+0x2f4>
    166a:	02 ff       	sbrs	r16, 2
    166c:	06 c0       	rjmp	.+12     	; 0x167a <vfprintf+0x2f2>
    166e:	1e 5f       	subi	r17, 0xFE	; 254
    1670:	05 c0       	rjmp	.+10     	; 0x167c <vfprintf+0x2f4>
    1672:	86 78       	andi	r24, 0x86	; 134
    1674:	90 70       	andi	r25, 0x00	; 0
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	09 f0       	breq	.+2      	; 0x167c <vfprintf+0x2f4>
    167a:	1f 5f       	subi	r17, 0xFF	; 255
    167c:	80 2e       	mov	r8, r16
    167e:	99 24       	eor	r9, r9
    1680:	03 fd       	sbrc	r16, 3
    1682:	12 c0       	rjmp	.+36     	; 0x16a8 <vfprintf+0x320>
    1684:	00 ff       	sbrs	r16, 0
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <vfprintf+0x31a>
    1688:	fd 2c       	mov	r15, r13
    168a:	1e 15       	cp	r17, r14
    168c:	50 f4       	brcc	.+20     	; 0x16a2 <vfprintf+0x31a>
    168e:	fe 0c       	add	r15, r14
    1690:	f1 1a       	sub	r15, r17
    1692:	1e 2d       	mov	r17, r14
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0x31a>
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	b3 01       	movw	r22, r6
    169c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    16a0:	1f 5f       	subi	r17, 0xFF	; 255
    16a2:	1e 15       	cp	r17, r14
    16a4:	c0 f3       	brcs	.-16     	; 0x1696 <vfprintf+0x30e>
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <vfprintf+0x328>
    16a8:	1e 15       	cp	r17, r14
    16aa:	10 f4       	brcc	.+4      	; 0x16b0 <vfprintf+0x328>
    16ac:	e1 1a       	sub	r14, r17
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <vfprintf+0x32a>
    16b0:	ee 24       	eor	r14, r14
    16b2:	84 fe       	sbrs	r8, 4
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <vfprintf+0x34c>
    16b6:	80 e3       	ldi	r24, 0x30	; 48
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	b3 01       	movw	r22, r6
    16bc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    16c0:	82 fe       	sbrs	r8, 2
    16c2:	1f c0       	rjmp	.+62     	; 0x1702 <vfprintf+0x37a>
    16c4:	81 fe       	sbrs	r8, 1
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <vfprintf+0x346>
    16c8:	88 e5       	ldi	r24, 0x58	; 88
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	10 c0       	rjmp	.+32     	; 0x16ee <vfprintf+0x366>
    16ce:	88 e7       	ldi	r24, 0x78	; 120
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0d c0       	rjmp	.+26     	; 0x16ee <vfprintf+0x366>
    16d4:	c4 01       	movw	r24, r8
    16d6:	86 78       	andi	r24, 0x86	; 134
    16d8:	90 70       	andi	r25, 0x00	; 0
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	91 f0       	breq	.+36     	; 0x1702 <vfprintf+0x37a>
    16de:	81 fc       	sbrc	r8, 1
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x35e>
    16e2:	80 e2       	ldi	r24, 0x20	; 32
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <vfprintf+0x360>
    16e6:	8b e2       	ldi	r24, 0x2B	; 43
    16e8:	07 fd       	sbrc	r16, 7
    16ea:	8d e2       	ldi	r24, 0x2D	; 45
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	b3 01       	movw	r22, r6
    16f0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x37a>
    16f6:	80 e3       	ldi	r24, 0x30	; 48
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	b3 01       	movw	r22, r6
    16fc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    1700:	fa 94       	dec	r15
    1702:	df 14       	cp	r13, r15
    1704:	c0 f3       	brcs	.-16     	; 0x16f6 <vfprintf+0x36e>
    1706:	da 94       	dec	r13
    1708:	f2 01       	movw	r30, r4
    170a:	ed 0d       	add	r30, r13
    170c:	f1 1d       	adc	r31, r1
    170e:	80 81       	ld	r24, Z
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	b3 01       	movw	r22, r6
    1714:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    1718:	dd 20       	and	r13, r13
    171a:	a9 f7       	brne	.-22     	; 0x1706 <vfprintf+0x37e>
    171c:	06 c0       	rjmp	.+12     	; 0x172a <vfprintf+0x3a2>
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	b3 01       	movw	r22, r6
    1724:	0e 94 b8 0b 	call	0x1770	; 0x1770 <fputc>
    1728:	ea 94       	dec	r14
    172a:	ee 20       	and	r14, r14
    172c:	c1 f7       	brne	.-16     	; 0x171e <vfprintf+0x396>
    172e:	40 ce       	rjmp	.-896    	; 0x13b0 <vfprintf+0x28>
    1730:	f3 01       	movw	r30, r6
    1732:	86 81       	ldd	r24, Z+6	; 0x06
    1734:	97 81       	ldd	r25, Z+7	; 0x07
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0x3b4>
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	9f ef       	ldi	r25, 0xFF	; 255
    173c:	2d 96       	adiw	r28, 0x0d	; 13
    173e:	e2 e1       	ldi	r30, 0x12	; 18
    1740:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__epilogue_restores__>

00001744 <strnlen_P>:
    1744:	fc 01       	movw	r30, r24
    1746:	05 90       	lpm	r0, Z+
    1748:	61 50       	subi	r22, 0x01	; 1
    174a:	70 40       	sbci	r23, 0x00	; 0
    174c:	01 10       	cpse	r0, r1
    174e:	d8 f7       	brcc	.-10     	; 0x1746 <strnlen_P+0x2>
    1750:	80 95       	com	r24
    1752:	90 95       	com	r25
    1754:	8e 0f       	add	r24, r30
    1756:	9f 1f       	adc	r25, r31
    1758:	08 95       	ret

0000175a <strnlen>:
    175a:	fc 01       	movw	r30, r24
    175c:	61 50       	subi	r22, 0x01	; 1
    175e:	70 40       	sbci	r23, 0x00	; 0
    1760:	01 90       	ld	r0, Z+
    1762:	01 10       	cpse	r0, r1
    1764:	d8 f7       	brcc	.-10     	; 0x175c <strnlen+0x2>
    1766:	80 95       	com	r24
    1768:	90 95       	com	r25
    176a:	8e 0f       	add	r24, r30
    176c:	9f 1f       	adc	r25, r31
    176e:	08 95       	ret

00001770 <fputc>:
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	8c 01       	movw	r16, r24
    177a:	eb 01       	movw	r28, r22
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	81 ff       	sbrs	r24, 1
    1780:	1b c0       	rjmp	.+54     	; 0x17b8 <fputc+0x48>
    1782:	82 ff       	sbrs	r24, 2
    1784:	0d c0       	rjmp	.+26     	; 0x17a0 <fputc+0x30>
    1786:	2e 81       	ldd	r18, Y+6	; 0x06
    1788:	3f 81       	ldd	r19, Y+7	; 0x07
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	28 17       	cp	r18, r24
    1790:	39 07       	cpc	r19, r25
    1792:	64 f4       	brge	.+24     	; 0x17ac <fputc+0x3c>
    1794:	e8 81       	ld	r30, Y
    1796:	f9 81       	ldd	r31, Y+1	; 0x01
    1798:	01 93       	st	Z+, r16
    179a:	f9 83       	std	Y+1, r31	; 0x01
    179c:	e8 83       	st	Y, r30
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <fputc+0x3c>
    17a0:	e8 85       	ldd	r30, Y+8	; 0x08
    17a2:	f9 85       	ldd	r31, Y+9	; 0x09
    17a4:	80 2f       	mov	r24, r16
    17a6:	09 95       	icall
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	31 f4       	brne	.+12     	; 0x17b8 <fputc+0x48>
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	9f 81       	ldd	r25, Y+7	; 0x07
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	9f 83       	std	Y+7, r25	; 0x07
    17b4:	8e 83       	std	Y+6, r24	; 0x06
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <fputc+0x4c>
    17b8:	0f ef       	ldi	r16, 0xFF	; 255
    17ba:	1f ef       	ldi	r17, 0xFF	; 255
    17bc:	c8 01       	movw	r24, r16
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	08 95       	ret

000017c8 <__ultoa_invert>:
    17c8:	fa 01       	movw	r30, r20
    17ca:	aa 27       	eor	r26, r26
    17cc:	28 30       	cpi	r18, 0x08	; 8
    17ce:	51 f1       	breq	.+84     	; 0x1824 <__ultoa_invert+0x5c>
    17d0:	20 31       	cpi	r18, 0x10	; 16
    17d2:	81 f1       	breq	.+96     	; 0x1834 <__ultoa_invert+0x6c>
    17d4:	e8 94       	clt
    17d6:	6f 93       	push	r22
    17d8:	6e 7f       	andi	r22, 0xFE	; 254
    17da:	6e 5f       	subi	r22, 0xFE	; 254
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	af 4f       	sbci	r26, 0xFF	; 255
    17e4:	b1 e0       	ldi	r27, 0x01	; 1
    17e6:	3e d0       	rcall	.+124    	; 0x1864 <__ultoa_invert+0x9c>
    17e8:	b4 e0       	ldi	r27, 0x04	; 4
    17ea:	3c d0       	rcall	.+120    	; 0x1864 <__ultoa_invert+0x9c>
    17ec:	67 0f       	add	r22, r23
    17ee:	78 1f       	adc	r23, r24
    17f0:	89 1f       	adc	r24, r25
    17f2:	9a 1f       	adc	r25, r26
    17f4:	a1 1d       	adc	r26, r1
    17f6:	68 0f       	add	r22, r24
    17f8:	79 1f       	adc	r23, r25
    17fa:	8a 1f       	adc	r24, r26
    17fc:	91 1d       	adc	r25, r1
    17fe:	a1 1d       	adc	r26, r1
    1800:	6a 0f       	add	r22, r26
    1802:	71 1d       	adc	r23, r1
    1804:	81 1d       	adc	r24, r1
    1806:	91 1d       	adc	r25, r1
    1808:	a1 1d       	adc	r26, r1
    180a:	20 d0       	rcall	.+64     	; 0x184c <__ultoa_invert+0x84>
    180c:	09 f4       	brne	.+2      	; 0x1810 <__ultoa_invert+0x48>
    180e:	68 94       	set
    1810:	3f 91       	pop	r19
    1812:	2a e0       	ldi	r18, 0x0A	; 10
    1814:	26 9f       	mul	r18, r22
    1816:	11 24       	eor	r1, r1
    1818:	30 19       	sub	r19, r0
    181a:	30 5d       	subi	r19, 0xD0	; 208
    181c:	31 93       	st	Z+, r19
    181e:	de f6       	brtc	.-74     	; 0x17d6 <__ultoa_invert+0xe>
    1820:	cf 01       	movw	r24, r30
    1822:	08 95       	ret
    1824:	46 2f       	mov	r20, r22
    1826:	47 70       	andi	r20, 0x07	; 7
    1828:	40 5d       	subi	r20, 0xD0	; 208
    182a:	41 93       	st	Z+, r20
    182c:	b3 e0       	ldi	r27, 0x03	; 3
    182e:	0f d0       	rcall	.+30     	; 0x184e <__ultoa_invert+0x86>
    1830:	c9 f7       	brne	.-14     	; 0x1824 <__ultoa_invert+0x5c>
    1832:	f6 cf       	rjmp	.-20     	; 0x1820 <__ultoa_invert+0x58>
    1834:	46 2f       	mov	r20, r22
    1836:	4f 70       	andi	r20, 0x0F	; 15
    1838:	40 5d       	subi	r20, 0xD0	; 208
    183a:	4a 33       	cpi	r20, 0x3A	; 58
    183c:	18 f0       	brcs	.+6      	; 0x1844 <__ultoa_invert+0x7c>
    183e:	49 5d       	subi	r20, 0xD9	; 217
    1840:	31 fd       	sbrc	r19, 1
    1842:	40 52       	subi	r20, 0x20	; 32
    1844:	41 93       	st	Z+, r20
    1846:	02 d0       	rcall	.+4      	; 0x184c <__ultoa_invert+0x84>
    1848:	a9 f7       	brne	.-22     	; 0x1834 <__ultoa_invert+0x6c>
    184a:	ea cf       	rjmp	.-44     	; 0x1820 <__ultoa_invert+0x58>
    184c:	b4 e0       	ldi	r27, 0x04	; 4
    184e:	a6 95       	lsr	r26
    1850:	97 95       	ror	r25
    1852:	87 95       	ror	r24
    1854:	77 95       	ror	r23
    1856:	67 95       	ror	r22
    1858:	ba 95       	dec	r27
    185a:	c9 f7       	brne	.-14     	; 0x184e <__ultoa_invert+0x86>
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	61 05       	cpc	r22, r1
    1860:	71 05       	cpc	r23, r1
    1862:	08 95       	ret
    1864:	9b 01       	movw	r18, r22
    1866:	ac 01       	movw	r20, r24
    1868:	0a 2e       	mov	r0, r26
    186a:	06 94       	lsr	r0
    186c:	57 95       	ror	r21
    186e:	47 95       	ror	r20
    1870:	37 95       	ror	r19
    1872:	27 95       	ror	r18
    1874:	ba 95       	dec	r27
    1876:	c9 f7       	brne	.-14     	; 0x186a <__ultoa_invert+0xa2>
    1878:	62 0f       	add	r22, r18
    187a:	73 1f       	adc	r23, r19
    187c:	84 1f       	adc	r24, r20
    187e:	95 1f       	adc	r25, r21
    1880:	a0 1d       	adc	r26, r0
    1882:	08 95       	ret

00001884 <__prologue_saves__>:
    1884:	2f 92       	push	r2
    1886:	3f 92       	push	r3
    1888:	4f 92       	push	r4
    188a:	5f 92       	push	r5
    188c:	6f 92       	push	r6
    188e:	7f 92       	push	r7
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	af 92       	push	r10
    1896:	bf 92       	push	r11
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	ca 1b       	sub	r28, r26
    18ae:	db 0b       	sbc	r29, r27
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	09 94       	ijmp

000018bc <__epilogue_restores__>:
    18bc:	2a 88       	ldd	r2, Y+18	; 0x12
    18be:	39 88       	ldd	r3, Y+17	; 0x11
    18c0:	48 88       	ldd	r4, Y+16	; 0x10
    18c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    18c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    18c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    18c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    18ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    18cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    18ce:	b9 84       	ldd	r11, Y+9	; 0x09
    18d0:	c8 84       	ldd	r12, Y+8	; 0x08
    18d2:	df 80       	ldd	r13, Y+7	; 0x07
    18d4:	ee 80       	ldd	r14, Y+6	; 0x06
    18d6:	fd 80       	ldd	r15, Y+5	; 0x05
    18d8:	0c 81       	ldd	r16, Y+4	; 0x04
    18da:	1b 81       	ldd	r17, Y+3	; 0x03
    18dc:	aa 81       	ldd	r26, Y+2	; 0x02
    18de:	b9 81       	ldd	r27, Y+1	; 0x01
    18e0:	ce 0f       	add	r28, r30
    18e2:	d1 1d       	adc	r29, r1
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	ed 01       	movw	r28, r26
    18f0:	08 95       	ret

000018f2 <_exit>:
    18f2:	f8 94       	cli

000018f4 <__stop_program>:
    18f4:	ff cf       	rjmp	.-2      	; 0x18f4 <__stop_program>
